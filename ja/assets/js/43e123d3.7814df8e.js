(self.webpackChunkaml_cheatsheet=self.webpackChunkaml_cheatsheet||[]).push([[934],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,k=u["".concat(s,".").concat(d)]||u[d]||l[d]||a;return t?r.createElement(k,i(i({ref:n},c),{},{components:t})):r.createElement(k,i({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var m=2;m<a;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7859:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var r=t(4034),o=t(9973),a=(t(7294),t(3905)),i={title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML."},p={unversionedId:"vs-code-snippets/snippets",id:"vs-code-snippets/snippets",isDocsHomePage:!1,title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/vs-code-snippets/snippets.md",sourceDirName:"vs-code-snippets",slug:"/vs-code-snippets/snippets",permalink:"/azureml-cheatsheets/ja/docs/vs-code-snippets/snippets",editUrl:"https://github.com/Azure/azureml-cheatsheets/tree/main/website/docs/vs-code-snippets/snippets.md",version:"current",frontMatter:{title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML."}},s=[{value:"Imports Group: Basic",id:"imports-group-basic",children:[]},{value:"Import Workspace",id:"import-workspace",children:[]},{value:"Import Compute Target",id:"import-compute-target",children:[]},{value:"Import Environment",id:"import-environment",children:[]},{value:"Import ScriptRunConfig",id:"import-scriptrunconfig",children:[]},{value:"Import Dataset",id:"import-dataset",children:[]},{value:"Import Datastore",id:"import-datastore",children:[]},{value:"Import Run",id:"import-run",children:[]},{value:"Import Conda Dependencies",id:"import-conda-dependencies",children:[]},{value:"Get Workspace From Config",id:"get-workspace-from-config",children:[]},{value:"Get Workspace",id:"get-workspace",children:[]},{value:"Get Compute",id:"get-compute",children:[]},{value:"Get Compute with SSH",id:"get-compute-with-ssh",children:[]},{value:"Get Environment",id:"get-environment",children:[]},{value:"Get Environment From Pip",id:"get-environment-from-pip",children:[]},{value:"Get Environment From Conda",id:"get-environment-from-conda",children:[]},{value:"Get Environment From SDK",id:"get-environment-from-sdk",children:[]},{value:"Get Environment From Custom image",id:"get-environment-from-custom-image",children:[]},{value:"Workspace Compute Targets",id:"workspace-compute-targets",children:[]},{value:"Workspace Environments",id:"workspace-environments",children:[]},{value:"Workspace Datastores",id:"workspace-datastores",children:[]},{value:"Workspace Datasets",id:"workspace-datasets",children:[]},{value:"Workspace Experiment",id:"workspace-experiment",children:[]},{value:"Workspace Models",id:"workspace-models",children:[]},{value:"Script Run Config",id:"script-run-config",children:[]},{value:"Script Run Config with Command",id:"script-run-config-with-command",children:[]},{value:"Script Run Config with Distributed Config",id:"script-run-config-with-distributed-config",children:[]},{value:"Run Details Widget",id:"run-details-widget",children:[]},{value:"Consume Dataset",id:"consume-dataset",children:[]},{value:"Create Tabular Dataset",id:"create-tabular-dataset",children:[]},{value:"Create File Dataset",id:"create-file-dataset",children:[]}],m={toc:s};function c(e){var n=e.components,i=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We have compiled a collection of useful templates in the form of\n",(0,a.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets"},"VS code snippets"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"VS Code Snippets",src:t(229).Z})),(0,a.kt)("p",null,"To add these snippets to your VS Code: ",(0,a.kt)("inlineCode",{parentName:"p"},"ctrl+shift+p")," > Type 'Configure user\nsnippets' > Select ",(0,a.kt)("inlineCode",{parentName:"p"},"python.json"),". All of these snippets are available here:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Azure/azureml-web/blob/main/website/docs/vs-code-snippets/python.json"},"python.json")),(0,a.kt)("h3",{id:"imports-group-basic"},"Imports Group: Basic"),(0,a.kt)("p",null,"Description: Import collection of basic Azure ML classes"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-basic")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace              # connect to workspace\nfrom azureml.core import Experiment             # connect/create experiments\nfrom azureml.core import ComputeTarget          # connect to compute\nfrom azureml.core import Environment            # manage e.g. Python environments\nfrom azureml.core import Datastore, Dataset     # work with data\n")),(0,a.kt)("h3",{id:"import-workspace"},"Import Workspace"),(0,a.kt)("p",null,"Description: Import Workspace class"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-workspace")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace\n")),(0,a.kt)("h3",{id:"import-compute-target"},"Import Compute Target"),(0,a.kt)("p",null,"Description: Import ComputeTarget class"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-compute-target")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import ComputeTarget\n")),(0,a.kt)("h3",{id:"import-environment"},"Import Environment"),(0,a.kt)("p",null,"Description: Import Environment class"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-environment")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\n")),(0,a.kt)("h3",{id:"import-scriptrunconfig"},"Import ScriptRunConfig"),(0,a.kt)("p",null,"Description: Import ScriptRunConfig class"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-script-run-config"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"import-src")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import ScriptRunConfig\n")),(0,a.kt)("h3",{id:"import-dataset"},"Import Dataset"),(0,a.kt)("p",null,"Description: Import Dataset class"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-dataset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Dataset\n")),(0,a.kt)("h3",{id:"import-datastore"},"Import Datastore"),(0,a.kt)("p",null,"Description: Import Datastore class"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-datastore")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Datastore\n")),(0,a.kt)("h3",{id:"import-run"},"Import Run"),(0,a.kt)("p",null,"Description: Import Run class"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-run")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Run\n")),(0,a.kt)("h3",{id:"import-conda-dependencies"},"Import Conda Dependencies"),(0,a.kt)("p",null,"Description: Import CondaDependencies class"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"import-conda-dependencies")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core.conda_dependencies import CondaDependencies\n")),(0,a.kt)("h3",{id:"get-workspace-from-config"},"Get Workspace From Config"),(0,a.kt)("p",null,"Description: Get Azure ML Workspace from config"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-workspace-config"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-config")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace\nws = Workspace.from_config()\n")),(0,a.kt)("h3",{id:"get-workspace"},"Get Workspace"),(0,a.kt)("p",null,"Description: Get Azure ML Workspace"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-workspace"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"get-ws")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace\nws = Workspace.get(\n    name='${1:name}',\n    subscription_id='${2:subscription_id}',\n    resource_group='${3:resource_group}',\n)\n")),(0,a.kt)("h3",{id:"get-compute"},"Get Compute"),(0,a.kt)("p",null,"Description: Get Azure ML Compute Target"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-compute")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import ComputeTarget\ntarget = ComputeTarget(${2:ws}, '${1:<compute_target_name>}')\n")),(0,a.kt)("h3",{id:"get-compute-with-ssh"},"Get Compute with SSH"),(0,a.kt)("p",null,"Description: Get Azure ML Compute Target with SSH"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-compute-ssh")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core.compute import AmlCompute\nfrom azureml.core.compute_target import ComputeTargetException\n\nssh_public_key = 'public-key-here'\ncompute_config = AmlCompute.provisioning_configuration(\n    vm_size='$2',\n    min_nodes=$3,\n    max_nodes=$4,\n    admin_username='$5',\n    admin_user_ssh_key=ssh_public_key,\n    vm_priority='${6|lowpriority,dedicated|}',\n    remote_login_port_public_access='Enabled',\n    )\n\ncluster = ComputeTarget.create(\n    workspace=${7:workspace_name},\n    name='${8:target_name}',\n    compute_config=compute_config,\n)\n")),(0,a.kt)("h3",{id:"get-environment"},"Get Environment"),(0,a.kt)("p",null,"Description: Get Azure ML Environment"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-environment")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\n${2:env} = Environment('${1:<env-name>}')\n")),(0,a.kt)("h3",{id:"get-environment-from-pip"},"Get Environment From Pip"),(0,a.kt)("p",null,"Description: Create environment from pip requirements.txt"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-environment-pip"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"env-pip")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment.from_pip_requirements(\n    name='${1:env_name}',\n    file_path='${2:requirements.txt}',\n)\n")),(0,a.kt)("h3",{id:"get-environment-from-conda"},"Get Environment From Conda"),(0,a.kt)("p",null,"Description: Create environment from Conda env.yml file"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-environment-conda"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"env-conda")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment.from_conda_specification(\n    name='${1:env_name}',\n    file_path='${2:env.yml}',\n)\n")),(0,a.kt)("h3",{id:"get-environment-from-sdk"},"Get Environment From SDK"),(0,a.kt)("p",null,"Description: Create environment using CondaDependencies class"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-environment-sdk"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"env-sdk")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nfrom azureml.core.conda_dependencies import CondaDependencies\nenv = Environment('${1:my-env}')\n\nconda = CondaDependencies()\n\n# add channels\nconda.add_channel('$2')\n\n# add conda packages\nconda.add_conda_package('$3')\n\n# add pip packages\nconda.add_pip_package('$4')\n\n# add conda dependencies to environment\nenv.python.conda_dependencies = conda\n")),(0,a.kt)("h3",{id:"get-environment-from-custom-image"},"Get Environment From Custom image"),(0,a.kt)("p",null,"Description: Create environment using Custom image"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"get-environment-custom-image"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"env-image")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment('${1:my-env}')\n\nenv.docker.enabled = True\n\n# base image for DockerHub\nenv.docker.base_image = '${2}'\n\n# if you are using base image from a Dockerfile\n# env.docker.base_image = None\n# env.docker.base_dockerfile = './Dockerfile'\n\n# The user_managed_dependencies flag to True will use your custom image's built-in Python environment. \nenv.python.user_managed_dependencies = True\n\n")),(0,a.kt)("h3",{id:"workspace-compute-targets"},"Workspace Compute Targets"),(0,a.kt)("p",null,"Description: Get compute target from workspace"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-compute-target")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"target = ws.compute_targets['${1:target-name}']\n")),(0,a.kt)("h3",{id:"workspace-environments"},"Workspace Environments"),(0,a.kt)("p",null,"Description: Get environment from workspace"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-environment")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"env = ws.environments['${1:env-name}']\n")),(0,a.kt)("h3",{id:"workspace-datastores"},"Workspace Datastores"),(0,a.kt)("p",null,"Description: Get datastore from workspace"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-datastore")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"datastore = ws.datastores['${1:datastore-name}']\n")),(0,a.kt)("h3",{id:"workspace-datasets"},"Workspace Datasets"),(0,a.kt)("p",null,"Description: Get dataset from workspace"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-dataset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"dataset = ws.datasets['${1:dataset-name}']\n")),(0,a.kt)("h3",{id:"workspace-experiment"},"Workspace Experiment"),(0,a.kt)("p",null,"Description: Get (existing) experiment from workspace"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-experiment")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"exp = ws.experiments['${1:experiment-name}']\n")),(0,a.kt)("h3",{id:"workspace-models"},"Workspace Models"),(0,a.kt)("p",null,"Description: Get model from workspace"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-model")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"model = ws.models['${1:model-name}']\n")),(0,a.kt)("h3",{id:"script-run-config"},"Script Run Config"),(0,a.kt)("p",null,"Description: Set up ScriptRunConfig including compute target, environment and experiment"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"script-run-config"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"src")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, Experiment, ScriptRunConfig\n\n# get workspace\nws = Workspace.from_config()\n\n# get compute target\ntarget = ws.compute_targets['${1:target-name}']\n\n# get registered environment\nenv = ws.environments['${2:env-name}']\n\n# get/create experiment\nexp = Experiment(ws, '${3:experiment_name}')\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='${4:.}',\n    script='${5:script.py}',\n    compute_target=target,\n    environment=env,\n    arguments=[${6:'--meaning', 42}],\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\nrun.wait_for_completion(show_output=True)\n")),(0,a.kt)("h3",{id:"script-run-config-with-command"},"Script Run Config with Command"),(0,a.kt)("p",null,"Description: Set up ScriptRunConfig using command argument"),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"script-run-config-command"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"command-src"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"src-command")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, Experiment, ScriptRunConfig\n\n# get workspace\nws = Workspace.from_config()\n\n# get compute target\ntarget = ws.compute_targets['${1:target-name}']\n\n# get registered environment\nenv = ws.environments['${2:env-name}']\n\n# get/create experiment\nexp = Experiment(ws, '${3:experiment_name}')\n\n# create command\ncommand = 'python ${4:script.py} ${5:--argument value}'.split()\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='${6:.}',\n    command=command,\n    compute_target=target,\n    environment=env,\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\nrun.wait_for_completion(show_output=True)\n")),(0,a.kt)("h3",{id:"script-run-config-with-distributed-config"},"Script Run Config with Distributed Config"),(0,a.kt)("p",null,"Description: Set up ScriptRunConfig for distributed training."),(0,a.kt)("p",null,"Prefixes: ",(0,a.kt)("inlineCode",{parentName:"p"},"script-run-config-distributed"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"distributed-src"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"src-distributed")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, ScriptRunConfig, Environment, Experiment\nfrom azureml.core.runconfig import MpiConfiguration\n\n# get workspace\nws = Workspace.from_config()\n\n# get compute target\ntarget = ws.compute_targets['${1:target-name}']\n\n# get curated environment\ncurated_env_name = '${2:AzureML-PyTorch-1.6-GPU}'\nenv = Environment.get(workspace=ws, name=curated_env_name)\n\n# get/create experiment\nexp = Experiment(ws, '${3:experiment_name}')\n\n# distributed job configuration\ndistributed_job_config = MpiConfiguration(process_count_per_node=4, node_count=2)\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='${4:.}',\n    script='${5:script.py}',\n    compute_target=target,\n    environment=env,\n    distributed_job_config=distributed_job_config,\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\nrun.wait_for_completion(show_output=True)\n")),(0,a.kt)("h3",{id:"run-details-widget"},"Run Details Widget"),(0,a.kt)("p",null,"Description: Represents a Jupyter notebook widget used to view the progress of model training."),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"run-details-widget")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace,Experiment,Run\nfrom azureml.widgets import RunDetails\n\n# get workspace\nws = Workspace.from_config()\n\n# get/create experiment\nexp = Experiment(ws, '${1:experiment_name}')\n\n# get run\nrun = Run(exp,'${2:run_id}')\n\n# submit script to AML\nRunDetails(run).show()\n")),(0,a.kt)("h3",{id:"consume-dataset"},"Consume Dataset"),(0,a.kt)("p",null,"Description: Download Azure ML dataset to current working directory"),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"consume-dataset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"#azureml-core of version 1.0.72 or higher is required\nfrom azureml.core import Workspace, Dataset\n\n# get/create experiment\nws = Workspace.from_config()\n\n# get dataset\ndataset = Dataset.get_by_name(ws, name='${1:dataset_name}')\ndataset.download(target_path='.', overwrite=False)\n")),(0,a.kt)("h3",{id:"create-tabular-dataset"},"Create Tabular Dataset"),(0,a.kt)("p",null,"Description: Create Azure ML tabular dataset."),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"create-tabular-dataset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, Datastore, Dataset\n\ndatastore_name = '${1:datastore_name}'\n\n# get workspace\nws = Workspace.from_config()\n\n# retrieve an existing datastore in the workspace by name\ndatastore = Datastore.get(ws, datastore_name)\n\n# create a TabularDataset from 1 file paths in datastore\ndatastore_paths = [(datastore, ${2:file_path})]\n\ncustom_ds = Dataset.Tabular.from_delimited_files(path=datastore_paths)\n")),(0,a.kt)("h3",{id:"create-file-dataset"},"Create File Dataset"),(0,a.kt)("p",null,"Description: Create Azure ML file dataset."),(0,a.kt)("p",null,"Prefix: ",(0,a.kt)("inlineCode",{parentName:"p"},"create-file-dataset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# create a FileDataset pointing to files in 'animals' folder and its subfolders recursively\nfrom azureml.core import Workspace, Datastore, Dataset\n\ndatastore_name = '${1:datastore_name}'\n\n# get workspace\nws = Workspace.from_config()\n\n# retrieve an existing datastore in the workspace by name\ndatastore = Datastore.get(ws, datastore_name)\n\n# create a FileDataset pointing to files in your folder and its subfolders recursively, you can also use public web urls paths\ndatastore_paths = [(datastore, ${2:file_path})]\n\ncustom_ds = Dataset.File.from_files(path=datastore_paths)\n")))}c.isMDXComponent=!0},229:function(e,n,t){"use strict";n.Z=t.p+"assets/images/vs-code-snippets-demo-0cadcf0d99a274246e4001b0ae7d00f3.gif"}}]);