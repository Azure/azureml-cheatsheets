(self.webpackChunkaml_cheatsheet=self.webpackChunkaml_cheatsheet||[]).push([[45],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=l(n),g=a,d=m["".concat(s,".").concat(g)]||m[g]||c[g]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4633:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var r=n(4034),a=n(9973),i=(n(7294),n(3905)),o={title:"Running Code in the Cloud",description:"Guide to running code with Azure ML",keywords:["run","experiment","submit","remote","ScriptRunConfig"]},p={unversionedId:"cheatsheets/python/v1/script-run-config",id:"cheatsheets/python/v1/script-run-config",isDocsHomePage:!1,title:"Running Code in the Cloud",description:"Guide to running code with Azure ML",source:"@site/docs/cheatsheets/python/v1/script-run-config.md",sourceDirName:"cheatsheets/python/v1",slug:"/cheatsheets/python/v1/script-run-config",permalink:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/script-run-config",editUrl:"https://github.com/Azure/azureml-cheatsheets/tree/main/website/docs/cheatsheets/python/v1/script-run-config.md",version:"current",frontMatter:{title:"Running Code in the Cloud",description:"Guide to running code with Azure ML",keywords:["run","experiment","submit","remote","ScriptRunConfig"]},sidebar:"pythonSidebar",previous:{title:"Data",permalink:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/data"},next:{title:"Metrics",permalink:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/logging"}},s=[{value:"Experiments and Runs",id:"experiments-and-runs",children:[]},{value:"ScriptRunConfig",id:"scriptrunconfig",children:[]},{value:"Command Line Arguments",id:"command-line-arguments",children:[{value:"Example: <code>sys.argv</code>",id:"example-sysargv",children:[]},{value:"Example: <code>argparse</code>",id:"example-argparse",children:[]}]},{value:"Commands",id:"commands",children:[]},{value:"Using Datasets",id:"using-datasets",children:[{value:"via Arguments",id:"via-arguments",children:[]}]},{value:"Run",id:"run",children:[{value:"Interactive",id:"interactive",children:[]},{value:"Get Context",id:"get-context",children:[]}]}],l={toc:s};function u(e){var t=e.components,o=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"experiments-and-runs"},"Experiments and Runs"),(0,i.kt)("p",null,"Azure ML is a machine-learning service that facilitates running your code in\nthe cloud. A ",(0,i.kt)("inlineCode",{parentName:"p"},"Run")," is an abstraction layer around each such submission, and is used to\nmonitor the job in real time as well as keep a history of your results."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run: A run represents a single execution of your code. See ",(0,i.kt)("a",{parentName:"li",href:"#run"},"Run")," for more details."),(0,i.kt)("li",{parentName:"ul"},"Experiments: An experiment is a light-weight container for ",(0,i.kt)("inlineCode",{parentName:"li"},"Run"),". Use experiments to submit\nand track runs.")),(0,i.kt)("p",null,"Create an experiment in your workspace ",(0,i.kt)("inlineCode",{parentName:"p"},"ws"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Experiment\nexp = Experiment(ws, '<experiment-name>')\n")),(0,i.kt)("h2",{id:"scriptrunconfig"},"ScriptRunConfig"),(0,i.kt)("p",null,"A common way to run code in the cloud is via the ",(0,i.kt)("inlineCode",{parentName:"p"},"ScriptRunConfig")," which packages\nyour source code (Script) and run configuration (RunConfig)."),(0,i.kt)("p",null,"Consider the following layout for your code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"source_directory/\n    script.py    # entry point to your code\n    module1.py   # modules called by script.py     \n    ...\n")),(0,i.kt)("p",null,"To run ",(0,i.kt)("inlineCode",{parentName:"p"},"script.py")," in the cloud via the ",(0,i.kt)("inlineCode",{parentName:"p"},"ScriptRunConfig")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"config = ScriptRunConfig(\n    source_directory='<path/to/source_directory>',\n    script='script.py',\n    compute_target=target,\n    environment=env,\n    arguments = [\n        '--learning_rate', 0.001,\n        '--momentum', 0.9,\n    ]\n)\n")),(0,i.kt)("p",null,"where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source_directory='source_directory'")," : Local directory with your code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"script='script.py'")," : Script to run. This does not need to be at the root of ",(0,i.kt)("inlineCode",{parentName:"li"},"source_directory"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"compute_taget=target")," : See ",(0,i.kt)("a",{parentName:"li",href:"copute-target"},"Compute Target")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"environment")," : See ",(0,i.kt)("a",{parentName:"li",href:"environment"},"Environment")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arguments")," : See ",(0,i.kt)("a",{parentName:"li",href:"#command-line-arguments"},"Arguments"))),(0,i.kt)("p",null,"Submit this code to Azure with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"exp = Experiment(ws, '<exp-name>')\nrun = exp.submit(config)\nprint(run)\nrun.wait_for_completion(show_output=True)\n")),(0,i.kt)("p",null,"This will present you with a link to monitor your run on the web (",(0,i.kt)("a",{parentName:"p",href:"https://ml.azure.com"},"https://ml.azure.com"),")\nas well as streaming logs to your terminal."),(0,i.kt)("h2",{id:"command-line-arguments"},"Command Line Arguments"),(0,i.kt)("p",null,"To pass command line arguments to your script use the ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," parameter in ",(0,i.kt)("inlineCode",{parentName:"p"},"ScriptRunConfig"),".\nArguments are specified as a list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"arguments = [first, second, third, ...]\n")),(0,i.kt)("p",null,"which are then passed to the script as command-line arguments as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ python script.py first second third ...\n")),(0,i.kt)("p",null,"This also supports using named arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"arguments = ['--first_arg', first_val, '--second_arg', second_val, ...]\n")),(0,i.kt)("p",null,"Arguments can be of type ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"float")," ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," and can also be used to reference data."),(0,i.kt)("p",null,"For more details on referencing data via the command line: ",(0,i.kt)("a",{parentName:"p",href:"dataset#use-dataset-in-a-remote-run"},"Use dataset in a remote run")),(0,i.kt)("h3",{id:"example-sysargv"},"Example: ",(0,i.kt)("inlineCode",{parentName:"h3"},"sys.argv")),(0,i.kt)("p",null,"In this example we pass two arguments to our script. If we were running this from the\nconsole:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="console"',title:'"console"'},"$ python script.py 0.001 0.9\n")),(0,i.kt)("p",null,"To mimic this command using ",(0,i.kt)("inlineCode",{parentName:"p"},"argument")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"ScriptRunConfig"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="run.py"',title:'"run.py"'},"arguments = [0.001, 0.9]\n\nconfig = ScriptRunConfig(\n    source_directory='.',\n    script='script.py',\n    arguments=arguments,\n)\n")),(0,i.kt)("p",null,"which can be consumed as usual in our script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="script.py"',title:'"script.py"'},"import sys\nlearning_rate = sys.argv[1]     # gets 0.001\nmomentum = sys.argv[2]          # gets 0.9\n")),(0,i.kt)("h3",{id:"example-argparse"},"Example: ",(0,i.kt)("inlineCode",{parentName:"h3"},"argparse")),(0,i.kt)("p",null,"In this example we pass two named arguments to our script. If we were running this from the\nconsole:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="console"',title:'"console"'},"$ python script.py --learning_rate 0.001 --momentum 0.9\n")),(0,i.kt)("p",null,"To mimic this behavior in ",(0,i.kt)("inlineCode",{parentName:"p"},"ScriptRunConfig"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="run.py"',title:'"run.py"'},"arguments = [\n    '--learning_rate', 0.001, \n    '--momentum', 0.9,\n    ]\n\nconfig = ScriptRunConfig(\n    source_directory='.',\n    script='script.py',\n    arguments=arguments,\n)\n")),(0,i.kt)("p",null,"which can be consumed as usual in our script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="script.py"',title:'"script.py"'},"import argparse\nparser = argparse.Argparser()\nparser.add_argument('--learning_rate', type=float)\nparser.add_argument('--momentum', type=float)\nargs = parser.parse_args()\n\nlearning_rate = args.learning_rate      # gets 0.001\nmomentum = args.momentum                # gets 0.9\n")),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("p",null,"It is possible to provide the explicit command to run."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"command = 'python script.py'.split()\n\nconfig = ScriptRunConfig(\n    source_directory='<path/to/code>',\n    command=command,\n    compute_target=compute_target,\n    environment=environment,\n)\n")),(0,i.kt)("p",null,"This example is equivalent to setting the argument ",(0,i.kt)("inlineCode",{parentName:"p"},"script='script.py'")," in place of\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"command")," argument."),(0,i.kt)("p",null,"This option provides a lot of flexibility. For example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Set environment variables"),": Some useful examples:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"command = 'export PYTHONPATH=$PWD && python script.py'.split()\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"command = f'export RANK={rank} && python script.py'.split()\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Run setup script"),": Run a setup script e.g. to download data, set environment variables."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"command = 'python setup.py && python script.py'.split()\n")))),(0,i.kt)("h2",{id:"using-datasets"},"Using Datasets"),(0,i.kt)("h3",{id:"via-arguments"},"via Arguments"),(0,i.kt)("p",null,"Pass a dataset to your ScriptRunConfig as an argument"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# create dataset\ndatastore = ws.get_default_datastore()\ndataset = Dataset.File.from_files(path=(datastore, '<path/on/datastore>'))\n\narguments = ['--dataset', dataset.as_mount()]\n\nconfig = ScriptRunConfig(\n    source_directory='.',\n    script='script.py',\n    arguments=arguments,\n)\n")),(0,i.kt)("p",null,"This mounts the dataset to the run where it can be referenced by ",(0,i.kt)("inlineCode",{parentName:"p"},"script.py"),"."),(0,i.kt)("h2",{id:"run"},"Run"),(0,i.kt)("h3",{id:"interactive"},"Interactive"),(0,i.kt)("p",null,"In an interactive setting e.g. a Jupyter notebook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"run = exp.start_logging()\n")),(0,i.kt)("h4",{id:"example-jupyter-notebook"},"Example: Jupyter notebook"),(0,i.kt)("p",null,"A common use case for interactive logging is to train a model in a notebook."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from azureml.core import Workspace\nfrom azureml.core import Experiment\nws = Workspace.from_config()\nexp = Experiment(ws, 'example')\n\nrun = exp.start_logging()                   # start interactive run\nprint(run.get_portal_url())                 # get link to studio\n\n# toy example in place of e.g. model\n# training or exploratory data analysis\nimport numpy as np\nfor x in np.linspace(0, 10):\n    y = np.sin(x)\n    run.log_row('sine', x=x, y=y)           # log metrics\n\nrun.complete()                              # stop interactive run\n")),(0,i.kt)("p",null,"Follow the link to the run to see the metric logging in real time."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7715).Z})),(0,i.kt)("h3",{id:"get-context"},"Get Context"),(0,i.kt)("p",null,"Code that is running within Azure ML is associated to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Run"),". The submitted code\ncan access its own run."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from azureml.core import Run\nrun = Run.get_context()\n")),(0,i.kt)("h4",{id:"example-logging-metrics-to-current-run-context"},"Example: Logging metrics to current run context"),(0,i.kt)("p",null,"A common use-case is logging metrics in a training script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="train.py"',title:'"train.py"'},"from azureml.core import Run\n\nrun = Run.get_context()\n\n# training code\nfor epoch in range(n_epochs):\n    model.train()\n    ...\n    val = model.evaluate()\n    run.log('validation', val)\n")),(0,i.kt)("p",null,"When this code is submitted to Azure ML (e.g. via ScriptRunConfig) it will log metrics to its associated run."),(0,i.kt)("p",null,"For more details: ",(0,i.kt)("a",{parentName:"p",href:"logging"},"Logging Metrics")))}u.isMDXComponent=!0},7715:function(e,t,n){"use strict";t.Z=n.p+"assets/images/run-ex-sine-a78600f095ae349a514b9d3e3e3dbcea.png"}}]);