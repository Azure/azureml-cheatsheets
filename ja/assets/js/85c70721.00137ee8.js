(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),m=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},l=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=m(n),d=a,h=l["".concat(i,".").concat(d)]||l[d]||u[d]||o;return n?r.a.createElement(h,c(c({ref:t},s),{},{components:n})):r.a.createElement(h,c({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=l;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return m}));var a=n(3),r=n(7),o=(n(0),n(117)),i={title:"Cheat Sheet",id:"cheatsheet",description:"A cheat sheet for Azure ML.",keywords:["azure machine learning","aml","cheatsheet","overview"]},c={unversionedId:"cheatsheets/python/v1/cheatsheet",id:"cheatsheets/python/v1/cheatsheet",isDocsHomePage:!1,title:"Cheat Sheet",description:"A cheat sheet for Azure ML.",source:"@site/docs/cheatsheets/python/v1/cheatsheet.md",sourceDirName:"cheatsheets/python/v1",slug:"/cheatsheets/python/v1/cheatsheet",permalink:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/cheatsheet",editUrl:"https://github.com/Azure/azureml-cheatsheets/tree/main/website/docs/cheatsheets/python/v1/cheatsheet.md",version:"current",frontMatter:{title:"Cheat Sheet",id:"cheatsheet",description:"A cheat sheet for Azure ML.",keywords:["azure machine learning","aml","cheatsheet","overview"]},sidebar:"pythonSidebar",next:{title:"Installation",permalink:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/installation"}},p=[{value:"Basic setup",id:"basic-setup",children:[{value:"Connect to workspace",id:"connect-to-workspace",children:[]},{value:"Connect to compute target",id:"connect-to-compute-target",children:[]},{value:"Prepare Python environment",id:"prepare-python-environment",children:[]}]},{value:"Submit code",id:"submit-code",children:[{value:"ScriptRunConfig",id:"scriptrunconfig",children:[]},{value:"Experiment",id:"experiment",children:[]},{value:"Sample usage",id:"sample-usage",children:[]}]},{value:"Distributed GPU Training",id:"distributed-gpu-training",children:[]},{value:"Connect to data",id:"connect-to-data",children:[]}],s={toc:p};function m(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.a)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.a)("h2",{id:"basic-setup"},"Basic setup"),Object(o.a)("h3",{id:"connect-to-workspace"},"Connect to workspace"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace\nws = Workspace.from_config()\n")),Object(o.a)("p",null,"The workspace object is the fundamental handle on your Azure ML assets and is used\nthroughout (often simply referred to by ",Object(o.a)("inlineCode",{parentName:"p"},"ws"),")."),Object(o.a)("p",null,"For more details: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/workspace"},"Workspaces")),Object(o.a)("h3",{id:"connect-to-compute-target"},"Connect to compute target"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"compute_target = ws.compute_targets['<compute-target-name>']\n")),Object(o.a)("p",null,Object(o.a)("strong",{parentName:"p"},"Sample usage.")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"compute_target = ws.compute_targets['powerful-gpu']\n\nconfig = ScriptRunConfig(\n    compute_target=compute_target,  # compute target used to run train.py script\n    source_directory='.',\n    script='train.py',\n)\n")),Object(o.a)("p",null,"For more details: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/compute-targets"},"Compute Target")),Object(o.a)("h3",{id:"prepare-python-environment"},"Prepare Python environment"),Object(o.a)("p",null,"You can use a pip ",Object(o.a)("inlineCode",{parentName:"p"},"requirements.txt")," file or a Conda ",Object(o.a)("inlineCode",{parentName:"p"},"env.yml")," file to define a Python environment on your compute."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\n# Option 1. From pip\nenvironment = Environment.from_pip_requirements('<env-name>', '<path/to/requirements.txt>')\n# Option 2. From Conda\nenvironment = Environment.from_conda_specification('<env-name>', '<path/to/env.yml>')\n")),Object(o.a)("p",null,"You can also use docker images to prepare your environments."),Object(o.a)("p",null,Object(o.a)("strong",{parentName:"p"},"Sample usage.")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"environment = Environment.from_pip_requirements('<env-name>', '<path/to/requirements.txt>')\n\nconfig = ScriptRunConfig(\n    environment=environment,  # set the python environment\n    source_directory='.',\n    script='train.py',\n)\n")),Object(o.a)("p",null,"For more details: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/environment"},"Environment")),Object(o.a)("h2",{id:"submit-code"},"Submit code"),Object(o.a)("p",null,"To run code in Azure ML you need to:"),Object(o.a)("ol",null,Object(o.a)("li",{parentName:"ol"},Object(o.a)("strong",{parentName:"li"},"Configure"),": Configuration includes specifying the code to run, the compute\ntarget to run on and the Python environment to run in."),Object(o.a)("li",{parentName:"ol"},Object(o.a)("strong",{parentName:"li"},"Submit"),": Create or reuse an Azure ML Experiment and submit the run.")),Object(o.a)("h3",{id:"scriptrunconfig"},"ScriptRunConfig"),Object(o.a)("p",null,"A typical directory may have the following structure:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-bash"},"source_directory/\n    script.py    # entry point to your code\n    module1.py   # modules called by script.py     \n    ...\n")),Object(o.a)("p",null,"To run ",Object(o.a)("inlineCode",{parentName:"p"},"$ (env) python <path/to/code>/script.py [arguments]")," on a remote compute\ncluster ",Object(o.a)("inlineCode",{parentName:"p"},"target: ComputeTarget")," with an environment ",Object(o.a)("inlineCode",{parentName:"p"},"env: Environment")," we can use\nthe ",Object(o.a)("inlineCode",{parentName:"p"},"ScriptRunConfig")," class."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import ScriptRunConfig\n\nconfig = ScriptRunConfig(\n    source_directory='<path/to/code>',  # relative paths okay\n    script='script.py',\n    compute_target=compute_target,\n    environment=environment,\n    arguments=arguments,\n)\n")),Object(o.a)("p",null,"For more details on arguments: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/script-run-config#command-line-arguments"},"Command line arguments")),Object(o.a)("div",{className:"admonition admonition-info alert alert--info"},Object(o.a)("div",{parentName:"div",className:"admonition-heading"},Object(o.a)("h5",{parentName:"div"},Object(o.a)("span",{parentName:"h5",className:"admonition-icon"},Object(o.a)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.a)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.a)("div",{parentName:"div",className:"admonition-content"},Object(o.a)("ul",{parentName:"div"},Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"compute_target"),": If not provided the script will run on your local machine."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"environment"),": If not provided, uses a default Python environment managed by Azure ML. See ",Object(o.a)("a",{parentName:"li",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/environment"},"Environment")," for more details.")))),Object(o.a)("h4",{id:"commands"},"Commands"),Object(o.a)("p",null,"It is possible to provide the explicit command to run."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"command = 'echo cool && python script.py'.split()\n\nconfig = ScriptRunConfig(\n    source_directory='<path/to/code>',  # relative paths okay\n    command=command,\n    compute_target=compute_target,\n    environment=environment,\n    arguments=arguments,\n)\n")),Object(o.a)("p",null,"For more details: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/script-run-config#commands"},"Commands")),Object(o.a)("h3",{id:"experiment"},"Experiment"),Object(o.a)("p",null,"To submit this code, create an ",Object(o.a)("inlineCode",{parentName:"p"},"Experiment"),": a light-weight container that helps to\norganize our submissions and keep track of code (See ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/run-history"},"Run History"),")."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"exp = Experiment(ws, '<experiment-name>')\nrun = exp.submit(config)\nprint(run.get_portal_url())\n")),Object(o.a)("p",null,"This link will take you to the Azure ML Studio where you can monitor your run."),Object(o.a)("p",null,"For more details: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/script-run-config"},"ScriptRunConfig")),Object(o.a)("h3",{id:"sample-usage"},"Sample usage"),Object(o.a)("p",null,"Here is a fairly typical example using a Conda environment to run a training\nscript ",Object(o.a)("inlineCode",{parentName:"p"},"train.py")," on our local machine from the command line."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-bash"},"$ conda env create -f env.yml  # create environment called pytorch\n$ conda activate pytorch\n(pytorch) $ cd <path/to/code>\n(pytorch) $ python train.py --learning_rate 0.001 --momentum 0.9\n")),Object(o.a)("p",null,"Suppose you want to run this on a GPU in Azure."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"ws = Workspace.from_config()\ncompute_target = ws.compute_targets['powerful-gpu']\nenvironment = Environment.from_conda_specification('pytorch', 'env.yml')\n\nconfig = ScriptRunConfig(\n    source_directory='<path/to/code>',\n    script='train.py',\n    environment=environment,\n    arguments=['--learning_rate', 0.001, '--momentum', 0.9],\n)\n\nrun = Experiment(ws, 'PyTorch model training').submit(config)\n")),Object(o.a)("h2",{id:"distributed-gpu-training"},"Distributed GPU Training"),Object(o.a)("p",null,"Adapt your ",Object(o.a)("inlineCode",{parentName:"p"},"ScriptRunConfig")," to enable distributed GPU training."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python",metastring:"{3,8-9,12,19}","{3,8-9,12,19}":!0},"from azureml.core import Workspace, Experiment, ScriptRunConfig\nfrom azureml.core import Environment\nfrom azureml.core.runconfig import MpiConfiguration\n\nws = Workspace.from_config()\ncompute_target = ws.compute_targets['powerful-gpu']\nenvironment = Environment.from_conda_specification('pytorch', 'env.yml')\nenvironment.docker.enabled = True\nenvironment.docker.base_image = 'mcr.microsoft.com/azureml/openmpi3.1.2-cuda10.1-cudnn7-ubuntu18.04'\n\n# train on 2 nodes each with 4 GPUs\nmpiconfig = MpiConfiguration(process_count_per_node=4, node_count=2)\n\nconfig = ScriptRunConfig(\n    source_directory='<path/to/code>',  # directory containing train.py\n    script='train.py',\n    environment=environment,\n    arguments=['--learning_rate', 0.001, '--momentum', 0.9],\n    distributed_job_config=mpiconfig,   # add the distributed configuration\n)\n\nrun = Experiment(ws, 'PyTorch model training').submit(config)\n")),Object(o.a)("div",{className:"admonition admonition-info alert alert--info"},Object(o.a)("div",{parentName:"div",className:"admonition-heading"},Object(o.a)("h5",{parentName:"div"},Object(o.a)("span",{parentName:"h5",className:"admonition-icon"},Object(o.a)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.a)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.a)("div",{parentName:"div",className:"admonition-content"},Object(o.a)("ul",{parentName:"div"},Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"mcr.microsoft.com/azureml/openmpi3.1.2-cuda10.1-cudnn7-ubuntu18.04")," is a docker image\nwith OpenMPI. This is required for distributed training on Azure ML."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"MpiConfiguration")," is where you specify the number of nodes and GPUs (per node) you\nwant to train on.")))),Object(o.a)("p",null,"For more details: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/distributed-training"},"Distributed GPU Training")),Object(o.a)("h2",{id:"connect-to-data"},"Connect to data"),Object(o.a)("p",null,"To work with data in your training scripts using your workspace ",Object(o.a)("inlineCode",{parentName:"p"},"ws")," and its default datastore:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"datastore = ws.get_default_datastore()\ndataset = Dataset.File.from_files(path=(datastore, '<path/on/datastore>'))\n")),Object(o.a)("p",null,"For more details see: ",Object(o.a)("a",{parentName:"p",href:"/azureml-cheatsheets/ja/docs/cheatsheets/python/v1/data"},"Data")),Object(o.a)("p",null,"Pass this to your training script as a command line argument."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"arguments=['--data', dataset.as_mount()]\n")))}m.isMDXComponent=!0}}]);