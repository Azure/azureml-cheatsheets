(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{102:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return m}));var a=t(3),r=t(7),o=(t(0),t(117)),i={title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML."},p={unversionedId:"vs-code-snippets/snippets",id:"vs-code-snippets/snippets",isDocsHomePage:!1,title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML.",source:"@site/docs/vs-code-snippets/snippets.md",sourceDirName:"vs-code-snippets",slug:"/vs-code-snippets/snippets",permalink:"/azureml-cheatsheets/docs/vs-code-snippets/snippets",editUrl:"https://github.com/Azure/azureml-cheatsheets/tree/main/website/docs/vs-code-snippets/snippets.md",version:"current",frontMatter:{title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML."}},c=[{value:"Imports Group: Basic",id:"imports-group-basic",children:[]},{value:"Import Workspace",id:"import-workspace",children:[]},{value:"Import Compute Target",id:"import-compute-target",children:[]},{value:"Import Environment",id:"import-environment",children:[]},{value:"Import ScriptRunConfig",id:"import-scriptrunconfig",children:[]},{value:"Import Dataset",id:"import-dataset",children:[]},{value:"Import Datastore",id:"import-datastore",children:[]},{value:"Import Run",id:"import-run",children:[]},{value:"Import Conda Dependencies",id:"import-conda-dependencies",children:[]},{value:"Get Workspace From Config",id:"get-workspace-from-config",children:[]},{value:"Get Workspace",id:"get-workspace",children:[]},{value:"Get Compute",id:"get-compute",children:[]},{value:"Get Compute with SSH",id:"get-compute-with-ssh",children:[]},{value:"Get Environment",id:"get-environment",children:[]},{value:"Get Environment From Pip",id:"get-environment-from-pip",children:[]},{value:"Get Environment From Conda",id:"get-environment-from-conda",children:[]},{value:"Get Environment From SDK",id:"get-environment-from-sdk",children:[]},{value:"Get Environment From Custom image",id:"get-environment-from-custom-image",children:[]},{value:"Workspace Compute Targets",id:"workspace-compute-targets",children:[]},{value:"Workspace Environments",id:"workspace-environments",children:[]},{value:"Workspace Datastores",id:"workspace-datastores",children:[]},{value:"Workspace Datasets",id:"workspace-datasets",children:[]},{value:"Workspace Experiment",id:"workspace-experiment",children:[]},{value:"Workspace Models",id:"workspace-models",children:[]},{value:"Script Run Config",id:"script-run-config",children:[]},{value:"Script Run Config with Command",id:"script-run-config-with-command",children:[]},{value:"Script Run Config with Distributed Config",id:"script-run-config-with-distributed-config",children:[]},{value:"Run Details Widget",id:"run-details-widget",children:[]},{value:"Consume Dataset",id:"consume-dataset",children:[]},{value:"Create Tabular Dataset",id:"create-tabular-dataset",children:[]},{value:"Create File Dataset",id:"create-file-dataset",children:[]}],s={toc:c};function m(e){var n=e.components,i=Object(r.a)(e,["components"]);return Object(o.a)("wrapper",Object(a.a)({},s,i,{components:n,mdxType:"MDXLayout"}),Object(o.a)("p",null,"We have compiled a collection of useful templates in the form of\n",Object(o.a)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets"},"VS code snippets"),"."),Object(o.a)("p",null,Object(o.a)("img",{alt:"VS Code Snippets",src:t(200).default})),Object(o.a)("p",null,"To add these snippets to your VS Code: ",Object(o.a)("inlineCode",{parentName:"p"},"ctrl+shift+p")," > Type 'Configure user\nsnippets' > Select ",Object(o.a)("inlineCode",{parentName:"p"},"python.json"),". All of these snippets are available here:\n",Object(o.a)("a",{parentName:"p",href:"https://github.com/Azure/azureml-web/blob/main/website/docs/vs-code-snippets/python.json"},"python.json")),Object(o.a)("h3",{id:"imports-group-basic"},"Imports Group: Basic"),Object(o.a)("p",null,"Description: Import collection of basic Azure ML classes"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-basic")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace              # connect to workspace\nfrom azureml.core import Experiment             # connect/create experiments\nfrom azureml.core import ComputeTarget          # connect to compute\nfrom azureml.core import Environment            # manage e.g. Python environments\nfrom azureml.core import Datastore, Dataset     # work with data\n")),Object(o.a)("h3",{id:"import-workspace"},"Import Workspace"),Object(o.a)("p",null,"Description: Import Workspace class"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-workspace")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace\n")),Object(o.a)("h3",{id:"import-compute-target"},"Import Compute Target"),Object(o.a)("p",null,"Description: Import ComputeTarget class"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-compute-target")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import ComputeTarget\n")),Object(o.a)("h3",{id:"import-environment"},"Import Environment"),Object(o.a)("p",null,"Description: Import Environment class"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-environment")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\n")),Object(o.a)("h3",{id:"import-scriptrunconfig"},"Import ScriptRunConfig"),Object(o.a)("p",null,"Description: Import ScriptRunConfig class"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"import-script-run-config"),", ",Object(o.a)("inlineCode",{parentName:"p"},"import-src")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import ScriptRunConfig\n")),Object(o.a)("h3",{id:"import-dataset"},"Import Dataset"),Object(o.a)("p",null,"Description: Import Dataset class"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-dataset")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Dataset\n")),Object(o.a)("h3",{id:"import-datastore"},"Import Datastore"),Object(o.a)("p",null,"Description: Import Datastore class"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-datastore")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Datastore\n")),Object(o.a)("h3",{id:"import-run"},"Import Run"),Object(o.a)("p",null,"Description: Import Run class"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-run")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Run\n")),Object(o.a)("h3",{id:"import-conda-dependencies"},"Import Conda Dependencies"),Object(o.a)("p",null,"Description: Import CondaDependencies class"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"import-conda-dependencies")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core.conda_dependencies import CondaDependencies\n")),Object(o.a)("h3",{id:"get-workspace-from-config"},"Get Workspace From Config"),Object(o.a)("p",null,"Description: Get Azure ML Workspace from config"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"get-workspace-config"),", ",Object(o.a)("inlineCode",{parentName:"p"},"ws-config")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace\nws = Workspace.from_config()\n")),Object(o.a)("h3",{id:"get-workspace"},"Get Workspace"),Object(o.a)("p",null,"Description: Get Azure ML Workspace"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"get-workspace"),", ",Object(o.a)("inlineCode",{parentName:"p"},"get-ws")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace\nws = Workspace.get(\n    name='${1:name}',\n    subscription_id='${2:subscription_id}',\n    resource_group='${3:resource_group}',\n)\n")),Object(o.a)("h3",{id:"get-compute"},"Get Compute"),Object(o.a)("p",null,"Description: Get Azure ML Compute Target"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"get-compute")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import ComputeTarget\ntarget = ComputeTarget(${2:ws}, '${1:<compute_target_name>}')\n")),Object(o.a)("h3",{id:"get-compute-with-ssh"},"Get Compute with SSH"),Object(o.a)("p",null,"Description: Get Azure ML Compute Target with SSH"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"get-compute-ssh")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core.compute import AmlCompute\nfrom azureml.core.compute_target import ComputeTargetException\n\nssh_public_key = 'public-key-here'\ncompute_config = AmlCompute.provisioning_configuration(\n    vm_size='$2',\n    min_nodes=$3,\n    max_nodes=$4,\n    admin_username='$5',\n    admin_user_ssh_key=ssh_public_key,\n    vm_priority='${6|lowpriority,dedicated|}',\n    remote_login_port_public_access='Enabled',\n    )\n\ncluster = ComputeTarget.create(\n    workspace=${7:workspace_name},\n    name='${8:target_name}',\n    compute_config=compute_config,\n)\n")),Object(o.a)("h3",{id:"get-environment"},"Get Environment"),Object(o.a)("p",null,"Description: Get Azure ML Environment"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"get-environment")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\n${2:env} = Environment('${1:<env-name>}')\n")),Object(o.a)("h3",{id:"get-environment-from-pip"},"Get Environment From Pip"),Object(o.a)("p",null,"Description: Create environment from pip requirements.txt"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"get-environment-pip"),", ",Object(o.a)("inlineCode",{parentName:"p"},"env-pip")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment.from_pip_requirements(\n    name='${1:env_name}',\n    file_path='${2:requirements.txt}',\n)\n")),Object(o.a)("h3",{id:"get-environment-from-conda"},"Get Environment From Conda"),Object(o.a)("p",null,"Description: Create environment from Conda env.yml file"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"get-environment-conda"),", ",Object(o.a)("inlineCode",{parentName:"p"},"env-conda")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment.from_conda_specification(\n    name='${1:env_name}',\n    file_path='${2:env.yml}',\n)\n")),Object(o.a)("h3",{id:"get-environment-from-sdk"},"Get Environment From SDK"),Object(o.a)("p",null,"Description: Create environment using CondaDependencies class"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"get-environment-sdk"),", ",Object(o.a)("inlineCode",{parentName:"p"},"env-sdk")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nfrom azureml.core.conda_dependencies import CondaDependencies\nenv = Environment('${1:my-env}')\n\nconda = CondaDependencies()\n\n# add channels\nconda.add_channel('$2')\n\n# add conda packages\nconda.add_conda_package('$3')\n\n# add pip packages\nconda.add_pip_package('$4')\n\n# add conda dependencies to environment\nenv.python.conda_dependencies = conda\n")),Object(o.a)("h3",{id:"get-environment-from-custom-image"},"Get Environment From Custom image"),Object(o.a)("p",null,"Description: Create environment using Custom image"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"get-environment-custom-image"),", ",Object(o.a)("inlineCode",{parentName:"p"},"env-image")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment('${1:my-env}')\n\nenv.docker.enabled = True\n\n# base image for DockerHub\nenv.docker.base_image = '${2}'\n\n# if you are using base image from a Dockerfile\n# env.docker.base_image = None\n# env.docker.base_dockerfile = './Dockerfile'\n\n# The user_managed_dependencies flag to True will use your custom image's built-in Python environment. \nenv.python.user_managed_dependencies = True\n\n")),Object(o.a)("h3",{id:"workspace-compute-targets"},"Workspace Compute Targets"),Object(o.a)("p",null,"Description: Get compute target from workspace"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"ws-compute-target")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"target = ws.compute_targets['${1:target-name}']\n")),Object(o.a)("h3",{id:"workspace-environments"},"Workspace Environments"),Object(o.a)("p",null,"Description: Get environment from workspace"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"ws-environment")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"env = ws.environments['${1:env-name}']\n")),Object(o.a)("h3",{id:"workspace-datastores"},"Workspace Datastores"),Object(o.a)("p",null,"Description: Get datastore from workspace"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"ws-datastore")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"datastore = ws.datastores['${1:datastore-name}']\n")),Object(o.a)("h3",{id:"workspace-datasets"},"Workspace Datasets"),Object(o.a)("p",null,"Description: Get dataset from workspace"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"ws-dataset")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"dataset = ws.datasets['${1:dataset-name}']\n")),Object(o.a)("h3",{id:"workspace-experiment"},"Workspace Experiment"),Object(o.a)("p",null,"Description: Get (existing) experiment from workspace"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"ws-experiment")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"exp = ws.experiments['${1:experiment-name}']\n")),Object(o.a)("h3",{id:"workspace-models"},"Workspace Models"),Object(o.a)("p",null,"Description: Get model from workspace"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"ws-model")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"model = ws.models['${1:model-name}']\n")),Object(o.a)("h3",{id:"script-run-config"},"Script Run Config"),Object(o.a)("p",null,"Description: Set up ScriptRunConfig including compute target, environment and experiment"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"script-run-config"),", ",Object(o.a)("inlineCode",{parentName:"p"},"src")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, Experiment, ScriptRunConfig\n\n# get workspace\nws = Workspace.from_config()\n\n# get compute target\ntarget = ws.compute_targets['${1:target-name}']\n\n# get registered environment\nenv = ws.environments['${2:env-name}']\n\n# get/create experiment\nexp = Experiment(ws, '${3:experiment_name}')\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='${4:.}',\n    script='${5:script.py}',\n    compute_target=target,\n    environment=env,\n    arguments=[${6:'--meaning', 42}],\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\nrun.wait_for_completion(show_output=True)\n")),Object(o.a)("h3",{id:"script-run-config-with-command"},"Script Run Config with Command"),Object(o.a)("p",null,"Description: Set up ScriptRunConfig using command argument"),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"script-run-config-command"),", ",Object(o.a)("inlineCode",{parentName:"p"},"command-src"),", ",Object(o.a)("inlineCode",{parentName:"p"},"src-command")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, Experiment, ScriptRunConfig\n\n# get workspace\nws = Workspace.from_config()\n\n# get compute target\ntarget = ws.compute_targets['${1:target-name}']\n\n# get registered environment\nenv = ws.environments['${2:env-name}']\n\n# get/create experiment\nexp = Experiment(ws, '${3:experiment_name}')\n\n# create command\ncommand = 'python ${4:script.py} ${5:--argument value}'.split()\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='${6:.}',\n    command=command,\n    compute_target=target,\n    environment=env,\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\nrun.wait_for_completion(show_output=True)\n")),Object(o.a)("h3",{id:"script-run-config-with-distributed-config"},"Script Run Config with Distributed Config"),Object(o.a)("p",null,"Description: Set up ScriptRunConfig for distributed training."),Object(o.a)("p",null,"Prefixes: ",Object(o.a)("inlineCode",{parentName:"p"},"script-run-config-distributed"),", ",Object(o.a)("inlineCode",{parentName:"p"},"distributed-src"),", ",Object(o.a)("inlineCode",{parentName:"p"},"src-distributed")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, ScriptRunConfig, Environment, Experiment\nfrom azureml.core.runconfig import MpiConfiguration\n\n# get workspace\nws = Workspace.from_config()\n\n# get compute target\ntarget = ws.compute_targets['${1:target-name}']\n\n# get curated environment\ncurated_env_name = '${2:AzureML-PyTorch-1.6-GPU}'\nenv = Environment.get(workspace=ws, name=curated_env_name)\n\n# get/create experiment\nexp = Experiment(ws, '${3:experiment_name}')\n\n# distributed job configuration\ndistributed_job_config = MpiConfiguration(process_count_per_node=4, node_count=2)\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='${4:.}',\n    script='${5:script.py}',\n    compute_target=target,\n    environment=env,\n    distributed_job_config=distributed_job_config,\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\nrun.wait_for_completion(show_output=True)\n")),Object(o.a)("h3",{id:"run-details-widget"},"Run Details Widget"),Object(o.a)("p",null,"Description: Represents a Jupyter notebook widget used to view the progress of model training."),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"run-details-widget")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace,Experiment,Run\nfrom azureml.widgets import RunDetails\n\n# get workspace\nws = Workspace.from_config()\n\n# get/create experiment\nexp = Experiment(ws, '${1:experiment_name}')\n\n# get run\nrun = Run(exp,'${2:run_id}')\n\n# submit script to AML\nRunDetails(run).show()\n")),Object(o.a)("h3",{id:"consume-dataset"},"Consume Dataset"),Object(o.a)("p",null,"Description: Download Azure ML dataset to current working directory"),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"consume-dataset")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"#azureml-core of version 1.0.72 or higher is required\nfrom azureml.core import Workspace, Dataset\n\n# get/create experiment\nws = Workspace.from_config()\n\n# get dataset\ndataset = Dataset.get_by_name(ws, name='${1:dataset_name}')\ndataset.download(target_path='.', overwrite=False)\n")),Object(o.a)("h3",{id:"create-tabular-dataset"},"Create Tabular Dataset"),Object(o.a)("p",null,"Description: Create Azure ML tabular dataset."),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"create-tabular-dataset")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Workspace, Datastore, Dataset\n\ndatastore_name = '${1:datastore_name}'\n\n# get workspace\nws = Workspace.from_config()\n\n# retrieve an existing datastore in the workspace by name\ndatastore = Datastore.get(ws, datastore_name)\n\n# create a TabularDataset from 1 file paths in datastore\ndatastore_paths = [(datastore, ${2:file_path})]\n\ncustom_ds = Dataset.Tabular.from_delimited_files(path=datastore_paths)\n")),Object(o.a)("h3",{id:"create-file-dataset"},"Create File Dataset"),Object(o.a)("p",null,"Description: Create Azure ML file dataset."),Object(o.a)("p",null,"Prefix: ",Object(o.a)("inlineCode",{parentName:"p"},"create-file-dataset")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre",className:"language-python"},"# create a FileDataset pointing to files in 'animals' folder and its subfolders recursively\nfrom azureml.core import Workspace, Datastore, Dataset\n\ndatastore_name = '${1:datastore_name}'\n\n# get workspace\nws = Workspace.from_config()\n\n# retrieve an existing datastore in the workspace by name\ndatastore = Datastore.get(ws, datastore_name)\n\n# create a FileDataset pointing to files in your folder and its subfolders recursively, you can also use public web urls paths\ndatastore_paths = [(datastore, ${2:file_path})]\n\ncustom_ds = Dataset.File.from_files(path=datastore_paths)\n")))}m.isMDXComponent=!0},117:function(e,n,t){"use strict";t.d(n,"a",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),m=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=m(t),d=a,g=u["".concat(i,".").concat(d)]||u[d]||l[d]||o;return t?r.a.createElement(g,p(p({ref:n},s),{},{components:t})):r.a.createElement(g,p({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},200:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/vs-code-snippets-demo-0cadcf0d99a274246e4001b0ae7d00f3.gif"}}]);