(self.webpackChunkaml_cheatsheet=self.webpackChunkaml_cheatsheet||[]).push([[693],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=o,m=h["".concat(u,".").concat(d)]||h[d]||p[d]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},346:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var r=n(4034),o=n(9973),a=(n(7294),n(3905)),i={title:"Run History"},s={unversionedId:"cheatsheets/python/v1/run-history",id:"cheatsheets/python/v1/run-history",isDocsHomePage:!1,title:"Run History",description:"Azure ML can supercharge your ML workloads in (at least!) two ways:",source:"@site/docs/cheatsheets/python/v1/run-history.md",sourceDirName:"cheatsheets/python/v1",slug:"/cheatsheets/python/v1/run-history",permalink:"/azureml-cheatsheets/docs/cheatsheets/python/v1/run-history",editUrl:"https://github.com/Azure/azureml-cheatsheets/tree/main/website/docs/cheatsheets/python/v1/run-history.md",version:"current",frontMatter:{title:"Run History"}},u=[{value:"Experiments and Runs",id:"experiments-and-runs",children:[]},{value:"Snapshot",id:"snapshot",children:[]},{value:"Metrics",id:"metrics",children:[]}],l={toc:u};function c(e){var t=e.components,i=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Azure ML can supercharge your ML workloads in (at least!) two ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AML Compute: Providing powerful compute resoures to train larger models"),(0,a.kt)("li",{parentName:"ul"},"Run history: Best-in-class lineage and reproducability")),(0,a.kt)("p",null,"In this article we focus on Run History - and why you need it in your life!"),(0,a.kt)("p",null,"As teams progress to running dozens, and eventually hundreds of experiments, having\nsome way to organize them is essential. Run History is a service that provides a number\nfeatures that quickly become essential to your ML-model builders:"),(0,a.kt)("h3",{id:"experiments-and-runs"},"Experiments and Runs"),(0,a.kt)("p",null,"When you are running dozens of experiments in multiple different projects, having a clear\nway to organize and search though the results is key. Azure ML provides two concepts to help\nwith this: ",(0,a.kt)("inlineCode",{parentName:"p"},"Run"),"s and ",(0,a.kt)("inlineCode",{parentName:"p"},"Experiment"),"s."),(0,a.kt)("h4",{id:"runs"},"Runs"),(0,a.kt)("p",null,"A run is a single execution of your code - usually a training script. The run has a life-cycle:\nthe code is prepared to be submited to Azure ML (e.g. via a ScriptRunConfig), then the code is\nsubmitted"),(0,a.kt)("p",null,"Once the code is submitted to Azure ML (for example, via a ",(0,a.kt)("inlineCode",{parentName:"p"},"ScriptRunConfig"),") a ",(0,a.kt)("inlineCode",{parentName:"p"},"Run")," object is\ncreated. This compute target is prepared (nodes are provisioned, containers hosting your Python\nenvironment are fired up), the entry point script is called (",(0,a.kt)("inlineCode",{parentName:"p"},"$ python run.py [args]"),") and logs\nstart being generated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"Files already downloaded and verified\nepoch=1, batch= 2000: loss 2.19\nepoch=1, batch= 4000: loss 1.82\nepoch=1, batch= 6000: loss 1.66\n...\n")),(0,a.kt)("p",null,"You may log metrics to Azure ML with ",(0,a.kt)("inlineCode",{parentName:"p"},"run.log('<metric_name>', metric_value)")," and monitor them in the studio:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(288).Z})),(0,a.kt)("p",null,"The training concludes, usually some model files are saved, and the nodes are\nreleased."),(0,a.kt)("p",null,"But the story doesn't end there. The run persists even after the nodes are returned\nto Azure. You can always return, either in code or via the studio, to see a history\nof your runs, all their outputs and metrics, and the exact code that was used to generate them."),(0,a.kt)("h4",{id:"experiments"},"Experiments"),(0,a.kt)("p",null,'An Experiment is a collection of runs. All runs belongs to an Experiment. Usually\nan Experiment is tied to a specific work item, for example, "Finetune Bert-Large",\nand will possess a number of runs as you iterate toward this goal.'),(0,a.kt)("h3",{id:"snapshot"},"Snapshot"),(0,a.kt)("p",null,"When you submit your code to run in Azure ML, a ",(0,a.kt)("em",{parentName:"p"},"snapshot")," is taken. This is a copy of the exact\ncode that ran. Think of this as version control for your experiments. Want to reproduce the\nresults from that experiment 2-months ago even though you've iterated on the model and the\ntraining script in the meantime? No problem, snapshot has you covered!"),(0,a.kt)("p",null,"You have total control of what goes into the snapshot with the ",(0,a.kt)("inlineCode",{parentName:"p"},".amlignore")," file. This plays\nthe same role as a ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," so you can efficiently manage what to include in the snapshot."),(0,a.kt)("h3",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,"As you run experiments, you track metrics - from validation loss through to GPU load. Analysing these metrics is essential to determining your best model. With Run History, these metrics are stored for all your runs."))}c.isMDXComponent=!0},288:function(e,t,n){"use strict";t.Z=n.p+"assets/images/logging-metrics-a151a23cc2167f2b40ef5d4ee5e86b01.png"}}]);