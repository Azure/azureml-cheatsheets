(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{108:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return o})),a.d(n,"metadata",(function(){return s})),a.d(n,"toc",(function(){return c})),a.d(n,"default",(function(){return p}));var t=a(3),r=a(7),i=(a(0),a(117)),o={title:"Environment",description:"Guide to working with Python environments in Azure ML.",keywords:["environment","python","conda","pip","docker","environment variables"]},s={unversionedId:"cheatsheets/python/v1/environment",id:"cheatsheets/python/v1/environment",isDocsHomePage:!1,title:"Environment",description:"Guide to working with Python environments in Azure ML.",source:"@site/docs/cheatsheets/python/v1/environment.md",sourceDirName:"cheatsheets/python/v1",slug:"/cheatsheets/python/v1/environment",permalink:"/azureml-cheatsheets/docs/cheatsheets/python/v1/environment",editUrl:"https://github.com/Azure/azureml-cheatsheets/tree/main/website/docs/cheatsheets/python/v1/environment.md",version:"current",frontMatter:{title:"Environment",description:"Guide to working with Python environments in Azure ML.",keywords:["environment","python","conda","pip","docker","environment variables"]},sidebar:"pythonSidebar",previous:{title:"Compute Target",permalink:"/azureml-cheatsheets/docs/cheatsheets/python/v1/compute-targets"},next:{title:"Data",permalink:"/azureml-cheatsheets/docs/cheatsheets/python/v1/data"}},c=[{value:"Azure ML Managed Python Environments",id:"azure-ml-managed-python-environments",children:[{value:"From pip",id:"from-pip",children:[]},{value:"From Conda",id:"from-conda",children:[]},{value:"In Azure ML SDK",id:"in-azure-ml-sdk",children:[]}]},{value:"Custom docker image / dockerfile",id:"custom-docker-image--dockerfile",children:[{value:"Build custom docker image for Azure ML",id:"build-custom-docker-image-for-azure-ml",children:[]},{value:"Use custom image from a private registry",id:"use-custom-image-from-a-private-registry",children:[]}]},{value:"Environment Management",id:"environment-management",children:[{value:"Registered Environments",id:"registered-environments",children:[]},{value:"Save / Load Environments",id:"save--load-environments",children:[]},{value:"Environment Variables",id:"environment-variables",children:[]}]},{value:"Hints and tips",id:"hints-and-tips",children:[{value:"Build docker images locally and push to Azure Container Registry",id:"build-docker-images-locally-and-push-to-azure-container-registry",children:[]},{value:"Bootstrap Script",id:"bootstrap-script",children:[]},{value:"Distributed bootstrapping",id:"distributed-bootstrapping",children:[]}]}],l={toc:c};function p(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},l,a,{components:n,mdxType:"MDXLayout"}),Object(i.a)("p",null,"Azure ML Environments are used to define the containers where your code will run. In the simplest case you can add custom Python libraries using pip, Conda or directly via the Azure ML Python SDK. If more customization is necessary you can use custom docker images."),Object(i.a)("p",null,"This page provides examples creating environments:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"From pip ",Object(i.a)("inlineCode",{parentName:"li"},"requirements.txt")," file"),Object(i.a)("li",{parentName:"ul"},"From Conda ",Object(i.a)("inlineCode",{parentName:"li"},"env.yml")," file"),Object(i.a)("li",{parentName:"ul"},"Directly via the Azure ML Python SDK"),Object(i.a)("li",{parentName:"ul"},"From custom Docker image")),Object(i.a)("h2",{id:"azure-ml-managed-python-environments"},"Azure ML Managed Python Environments"),Object(i.a)("h3",{id:"from-pip"},"From pip"),Object(i.a)("p",null,"Create Environment from pip ",Object(i.a)("inlineCode",{parentName:"p"},"requirements.txt")," file"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment.from_pip_requirements('<env-name>', '<path/to/requirements.txt>')\n")),Object(i.a)("h3",{id:"from-conda"},"From Conda"),Object(i.a)("p",null,"Create Environment from Conda ",Object(i.a)("inlineCode",{parentName:"p"},"env.yml")," file"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nenv = Environment.from_conda_specification('<env-name>', '<path/to/env.yml>')\n")),Object(i.a)("h3",{id:"in-azure-ml-sdk"},"In Azure ML SDK"),Object(i.a)("p",null,"Use the ",Object(i.a)("inlineCode",{parentName:"p"},"CondaDependencies")," class to create a Python environment in directly with the Azure ML\nPython SDK:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nfrom azureml.core.conda_dependencies import CondaDependencies\n\nconda = CondaDependencies()\n\n# add channels\nconda.add_channel('pytorch')\n\n# add conda packages\nconda.add_conda_package('python=3.7')\nconda.add_conda_package('pytorch')\nconda.add_conda_package('torchvision')\n\n# add pip packages\nconda.add_pip_package('pyyaml')\nconda.add_pip_package('mpi4py')\nconda.add_pip_package('deepspeed')\n\n# create environment\nenv = Environment('pytorch')\nenv.python.conda_dependencies = conda\n")),Object(i.a)("h2",{id:"custom-docker-image--dockerfile"},"Custom docker image / dockerfile"),Object(i.a)("p",null,"To create an ",Object(i.a)("inlineCode",{parentName:"p"},"Environment")," from a custom docker image:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"env = Environment('<env-name>')\nenv.docker.base_image = '<image-name>'\nenv.docker.base_image_registry.address = '<container-registry-address>'\nenv.docker.base_image_registry.username = '<acr-username>'\nenv.docker.base_image_registry.password = os.environ.get(\"CONTAINER_PASSWORD\")\n# optional\nenv.python.user_managed_dependencies = True\nenv.python.interpreter_path = '/opt/miniconda/envs/example/bin/python'\n")),Object(i.a)("p",null,"For example Azure Container Registry addresses are of the form ",Object(i.a)("inlineCode",{parentName:"p"},'"<acr-name>.azurecr.io"'),"."),Object(i.a)("p",null,Object(i.a)("strong",{parentName:"p"},"Never check in passwords"),". In this example we provide the password via an environment variable."),Object(i.a)("p",null,"To create an ",Object(i.a)("inlineCode",{parentName:"p"},"Environment")," from a dockerfile:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"env = Environment('<env-name>')\nenv.docker.base_dockerfile = './Dockerfile' # path to your dockerfile\n# optional\nenv.python.user_managed_dependencies = True\nenv.python.interpreter_path = '/opt/miniconda/envs/example/bin/python'\n")),Object(i.a)("p",null,Object(i.a)("strong",{parentName:"p"},"Remarks.")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"user_managed_dependencies = True"),": You are responsible for installing all necessary Python\nlibraries, typically in your docker image."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"interpreter_path"),": Only used when ",Object(i.a)("inlineCode",{parentName:"li"},"user_managed_dependencies=True")," and sets the Python interpreter\npath (e.g. ",Object(i.a)("inlineCode",{parentName:"li"},"which python"),").")),Object(i.a)("p",null,"It is possible to have Azure ML manage your Python installation when providing a custom base image. For example, using pip ",Object(i.a)("inlineCode",{parentName:"p"},"requirements.txt"),":"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"env = Environment.from_pip_requirements('<env-name>', '<path/to/requirements.txt>')\nenv.docker.base_dockerfile = './Dockerfile'\n")),Object(i.a)("p",null,Object(i.a)("strong",{parentName:"p"},"Note.")," In this case Python libraries installed in ",Object(i.a)("inlineCode",{parentName:"p"},"Dockerfile")," will ",Object(i.a)("strong",{parentName:"p"},"not")," be available."),Object(i.a)("h3",{id:"build-custom-docker-image-for-azure-ml"},"Build custom docker image for Azure ML"),Object(i.a)("p",null,"We ",Object(i.a)("strong",{parentName:"p"},"strongly")," recommend building your docker image from one of the Azure ML base images available\nhere: ",Object(i.a)("a",{parentName:"p",href:"https://github.com/Azure/AzureML-Containers"},"AzureML-Containers GitHub Repo")," - like this:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-dockerfile",metastring:'title="Dockerfile"',title:'"Dockerfile"'},"FROM mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04\n...\n")),Object(i.a)("p",null,"These images come configured with all the requirements to run on Azure ML."),Object(i.a)("p",null,"If user wants to build from scratch, here are a list of requirements and recommendations to keep in mind:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("strong",{parentName:"li"},"Conda"),": Azure ML uses Conda to manage python environments by default. If you intend to allow Azure ML to manage the Python environment, Conda is required."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("strong",{parentName:"li"},"libfuse"),": Required when using ",Object(i.a)("inlineCode",{parentName:"li"},"Dataset")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("strong",{parentName:"li"},"Openmpi"),": Required for distributed runs"),Object(i.a)("li",{parentName:"ul"},Object(i.a)("strong",{parentName:"li"},"nvidia/cuda"),": (Recommended) For GPU-based training build image from ",Object(i.a)("a",{parentName:"li",href:"https://hub.docker.com/r/nvidia/cuda"},"nvidia/cuda")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("strong",{parentName:"li"},"Mellanox OFED user space drivers")," (Recommend) For SKUs with Infiniband ")),Object(i.a)("p",null,"We suggest users to look at the ",Object(i.a)("a",{parentName:"p",href:"https://github.com/Azure/AzureML-Containers"},"dockerfiles of Azure ML base images")," as references."),Object(i.a)("h3",{id:"use-custom-image-from-a-private-registry"},"Use custom image from a private registry"),Object(i.a)("p",null,"Azure ML can use a custom image from a private registry as long as login information are provided. "),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},'env = Environment(\'<env-name>\')\nenv.docker.base_image = "/my/private/img:tag",  # image repository path\nenv.docker.base_image_registry.address = "myprivateacr.azurecr.io"  # private registry\n\n# Retrieve username and password from the workspace key vault\nenv.docker.base_image_registry.username = ws.get_default_keyvault().get_secret("username")  \nenv.docker.base_image_registry.password = ws.get_default_keyvault().get_secret("password")\n')),Object(i.a)("h2",{id:"environment-management"},"Environment Management"),Object(i.a)("h3",{id:"registered-environments"},"Registered Environments"),Object(i.a)("p",null,"Register an environment ",Object(i.a)("inlineCode",{parentName:"p"},"env: Environment")," to your workspace ",Object(i.a)("inlineCode",{parentName:"p"},"ws")," to reuse/share with your team."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"env.register(ws)\n")),Object(i.a)("p",null,"Registered environments can be obtained directly from the workspace handle ",Object(i.a)("inlineCode",{parentName:"p"},"ws"),":"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"envs: Dict[str, Environment] = ws.environments\n")),Object(i.a)("p",null,"This dictionary contains custom environments that have been registered to the workspace as well as a\ncollection of ",Object(i.a)("em",{parentName:"p"},"curated environments")," maintained by Azure ML."),Object(i.a)("h3",{id:"save--load-environments"},"Save / Load Environments"),Object(i.a)("p",null,"Save an environment to a local directory:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"env.save_to_directory('<path/to/local/directory>', overwrite=True)\n")),Object(i.a)("p",null,"This will generate a directory with two (human-understandable and editable) files:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"azureml_environment.json")," : Metadata including name, version, environment variables and Python and Docker configuration"),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"conda_dependencies.yml")," : Standard conda dependencies YAML (for more details see ",Object(i.a)("a",{parentName:"li",href:"https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-from-an-environment-yml-file"},"Conda docs"),").")),Object(i.a)("p",null,"Load this environment later with"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"env = Environment.load_from_directory('<path/to/local/directory>')\n")),Object(i.a)("h3",{id:"environment-variables"},"Environment Variables"),Object(i.a)("p",null,"To set environment variables use the ",Object(i.a)("inlineCode",{parentName:"p"},"environment_variables: Dict[str, str]")," attribute. Environment variables\nare set on the process where the user script is executed."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"env = Environment('example')\nenv.environment_variables['EXAMPLE_ENV_VAR'] = 'EXAMPLE_VALUE'\n")),Object(i.a)("h2",{id:"hints-and-tips"},"Hints and tips"),Object(i.a)("p",null,"When the conda dependencies are managed by Azure ML (",Object(i.a)("inlineCode",{parentName:"p"},"user_managed_dependencies=False"),", by default), Azure ML will check whether the same environment has already been materialized into a docker image in the Azure Container Registry associated with the Azure ML workspace. If it is a new environment, Azure ML will have a job preparation stage to build a new docker image for the new environment. You will see a image build log file in the logs and monitor the image build progress. The job won't start until the image is built and pushed to the container registry. "),Object(i.a)("p",null,"This image building process can take some time and delay your job start. To avoid unnecessary image building, consider:"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"Register an environment that contains most packages you need and reuse when possible."),Object(i.a)("li",{parentName:"ol"},"If you only need a few extra packages on top of an existing environment, ",Object(i.a)("ol",{parentName:"li"},Object(i.a)("li",{parentName:"ol"},"If the existing environment is a docker image, use a dockerfile from this docker image so you only need to add one layer to install a few extra packagers. "),Object(i.a)("li",{parentName:"ol"},"Install extra python packages in your user script so the package installation happens in the script run as part of your code instead of asking Azure ML to treat them as part of a new environment. Consider using a ",Object(i.a)("a",{parentName:"li",href:"#advanced-shell-initialization-script"},"setup script"),".")))),Object(i.a)("p",null,"Due to intricacy of the python package dependencies and potential version conflict, we recommend use of custom docker image and dockerfiles (based on Azure ML base images) to manage your own python environment. This practice not only gives users full transparency of the environment, but also saves image building times at agile development stage. "),Object(i.a)("h3",{id:"build-docker-images-locally-and-push-to-azure-container-registry"},"Build docker images locally and push to Azure Container Registry"),Object(i.a)("p",null,"If you have docker installed locally, you can build the docker image from Azure ML environment locally with option to push the image to workspace ACR directly. This is recommended when users are iterating on the dockerfile since local build can utilize cached layers. "),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Environment\nmyenv = Environment(name='<env-name>')\nregistered_env = myenv.register(ws)\nregistered_env.build_local(ws, useDocker=True, pushImageToWorkspaceAcr=True)\n")),Object(i.a)("h3",{id:"bootstrap-script"},"Bootstrap Script"),Object(i.a)("p",null,"It can be useful to invoke a ",Object(i.a)("inlineCode",{parentName:"p"},"bootstrap.sh")," script for faster development. One typical example\nwould be to modify the Python installation ",Object(i.a)("em",{parentName:"p"},"at runtime")," to avoid frequent image rebuilding."),Object(i.a)("p",null,"This can be done quite simply with ",Object(i.a)("em",{parentName:"p"},"commands"),". First set up your ",Object(i.a)("inlineCode",{parentName:"p"},"bootstrap.sh")," script."),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-bash",metastring:'title="bootstrap.sh"',title:'"bootstrap.sh"'},'echo "Running bootstrap.sh"\npip install torch==1.8.0+cu111\n...\n')),Object(i.a)("p",null,"To have this run ahead of your training script ",Object(i.a)("inlineCode",{parentName:"p"},"train.py")," make use of the command:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-python"},"cmd = \"bash bootstrap.sh && python train.py --learning_rate 1e-5\".split()\n\nconfig = ScriptRunConfig(\n    source_directory='<path/to/code>',\n    command=command,\n    compute_target=compute_target,\n    environment=environment,\n)\n")),Object(i.a)("p",null,"See ",Object(i.a)("a",{parentName:"p",href:"script-run-config"},"Running Code in the Cloud")," for more details on ",Object(i.a)("inlineCode",{parentName:"p"},"ScriptRunConfig"),"."),Object(i.a)("h3",{id:"distributed-bootstrapping"},"Distributed bootstrapping"),Object(i.a)("p",null,"In some cases you may wish to run certain parts of your ",Object(i.a)("inlineCode",{parentName:"p"},"bootstrap.sh")," script\non certain ranks in a distributed setup. This can be achieved with a little care\nas follows:"),Object(i.a)("pre",null,Object(i.a)("code",{parentName:"pre",className:"language-bash",metastring:'title="bootstrap.sh"',title:'"bootstrap.sh"'},'MARKER="/tmp/.azureml_bootstrap_complete"\n\nif [[ $AZ_BATCHAI_TASK_INDEX = 0 ]] ; then    \n    echo "Running bootstrap.sh"\n    echo "Installing transformers from source"\n    pip install git+https://github.com/huggingface/transformers\n    python -c "from transformers import pipeline; print(pipeline(\'sentiment-analysis\')(\'we love you\'))"\n    pip install datasets\n    pip install tensorflow\n    echo "Installation complete"\n    touch $MARKER\nfi\necho "Barrier..."\nwhile [[ ! -f $MARKER ]]\ndo\n    sleep 1\ndone\necho "Bootstrap complete!"\n')),Object(i.a)("p",null,"This script will wait for local rank 0 (",Object(i.a)("inlineCode",{parentName:"p"},"$AZ_BATCHAI_TASK_INDEX"),") to create its ",Object(i.a)("inlineCode",{parentName:"p"},"MARKER")," file\nbefore the other processes continue."))}p.isMDXComponent=!0},117:function(e,n,a){"use strict";a.d(n,"a",(function(){return u}));var t=a(0),r=a.n(t);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(a),u=t,h=d["".concat(o,".").concat(u)]||d[u]||m[u]||i;return a?r.a.createElement(h,s(s({ref:n},l),{},{components:a})):r.a.createElement(h,s({ref:n},l))}));function u(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:t,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);