(self.webpackChunkaml_cheatsheet=self.webpackChunkaml_cheatsheet||[]).push([[915],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=s(n),g=i,h=p["".concat(l,".").concat(g)]||p[g]||u[g]||o;return n?r.createElement(h,a(a({ref:t},m),{},{components:n})):r.createElement(h,a({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1035:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var r=n(4034),i=n(9973),o=(n(7294),n(3905)),a={title:"Metrics",description:"Guide to metric logging in Azure ML.",keywords:["metric","logging"]},c={unversionedId:"cheatsheets/python/v1/logging",id:"cheatsheets/python/v1/logging",isDocsHomePage:!1,title:"Metrics",description:"Guide to metric logging in Azure ML.",source:"@site/docs/cheatsheets/python/v1/logging.md",sourceDirName:"cheatsheets/python/v1",slug:"/cheatsheets/python/v1/logging",permalink:"/azureml-cheatsheets/docs/cheatsheets/python/v1/logging",editUrl:"https://github.com/Azure/azureml-cheatsheets/tree/main/website/docs/cheatsheets/python/v1/logging.md",version:"current",frontMatter:{title:"Metrics",description:"Guide to metric logging in Azure ML.",keywords:["metric","logging"]},sidebar:"pythonSidebar",previous:{title:"Running Code in the Cloud",permalink:"/azureml-cheatsheets/docs/cheatsheets/python/v1/script-run-config"},next:{title:"Distributed GPU Training",permalink:"/azureml-cheatsheets/docs/cheatsheets/python/v1/distributed-training"}},l=[{value:"Logging metrics",id:"logging-metrics",children:[{value:"<code>log</code>",id:"log",children:[]},{value:"<code>log_row</code>",id:"log_row",children:[]},{value:"With MLFlow",id:"with-mlflow",children:[]}]},{value:"Viewing metrics",id:"viewing-metrics",children:[{value:"Via the SDK",id:"via-the-sdk",children:[]}]}],s={toc:l};function m(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"logging-metrics"},"Logging metrics"),(0,o.kt)("p",null,"Logging a metric to a run causes that metric to be stored in the run record in the experiment.\nVisualize and keep a history of all logged metrics."),(0,o.kt)("h3",{id:"log"},(0,o.kt)("inlineCode",{parentName:"h3"},"log")),(0,o.kt)("p",null,"Log a single metric value to a run."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from azureml.core import Run\nrun = Run.get_context()\nrun.log('metric-name', metric_value)\n")),(0,o.kt)("p",null,"You can log the same metric multiple times within a run, the result being considered a vector\nof that metric."),(0,o.kt)("h3",{id:"log_row"},(0,o.kt)("inlineCode",{parentName:"h3"},"log_row")),(0,o.kt)("p",null,"Log a metric with multiple columns."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from azureml.core import Run\nrun = Run.get_context()\nrun.log_row("Y over X", x=1, y=0.4)\n')),(0,o.kt)("h3",{id:"with-mlflow"},"With MLFlow"),(0,o.kt)("p",null,"Use MLFlowLogger to log metrics."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="script.py"',title:'"script.py"'},"from azureml.core import Run\n\n# connect to the workspace from within your running code\nrun = Run.get_context()\nws = run.experiment.workspace\n\n# workspace has associated ml-flow-tracking-uri\nmlflow_url = ws.get_mlflow_tracking_uri()\n")),(0,o.kt)("h4",{id:"example-pytorch-lightning"},"Example: PyTorch Lightning"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pytorch_lightning.loggers import MLFlowLogger\n\nmlf_logger = MLFlowLogger(experiment_name=run.experiment.name, tracking_uri=mlflow_url)\nmlf_logger._run_id = run.id\n")),(0,o.kt)("h2",{id:"viewing-metrics"},"Viewing metrics"),(0,o.kt)("h3",{id:"via-the-sdk"},"Via the SDK"),(0,o.kt)("p",null,"Viewing metrics in a run (for more details on runs: ",(0,o.kt)("a",{parentName:"p",href:"run"},"Run"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"metrics = run.get_metrics()\n# metrics is of type Dict[str, List[float]] mapping mertic names\n# to a list of the values for that metric in the given run.\n\nmetrics.get('metric-name')\n# list of metrics in the order they were recorded\n")),(0,o.kt)("p",null,"To view all recorded values for a given metric ",(0,o.kt)("inlineCode",{parentName:"p"},"my-metric")," in a\ngiven experiment ",(0,o.kt)("inlineCode",{parentName:"p"},"my-experiment"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"experiments = ws.experiments\n# of type Dict[str, Experiment] mapping experiment names the\n# corresponding Experiment\n\nexp = experiments['my-experiment']\nfor run in exp.get_runs():\n    metrics = run.get_metrics()\n    \n    my_metric = metrics.get('my-metric')\n    if my_metric:\n        print(my_metric)\n")))}m.isMDXComponent=!0}}]);