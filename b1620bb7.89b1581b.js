(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{102:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(t),b=a,u=m["".concat(o,".").concat(b)]||m[b]||d[b]||i;return t?r.a.createElement(u,c(c({ref:n},l),{},{components:t})):r.a.createElement(u,c({ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},86:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(2),r=t(6),i=(t(0),t(102)),o={title:"Environment",description:"Guide to working with Python environments in Azure ML.",keywords:["environment","python","conda","pip","docker","environment variables"]},c={unversionedId:"cheatsheet/environment",id:"cheatsheet/environment",isDocsHomePage:!1,title:"Environment",description:"Guide to working with Python environments in Azure ML.",source:"@site/docs/cheatsheet/environment.md",slug:"/cheatsheet/environment",permalink:"/azureml-web/docs/cheatsheet/environment",editUrl:"https://github.com/Azure/azureml-web/tree/main/website/docs/cheatsheet/environment.md",version:"current",sidebar:"mainSidebar",previous:{title:"Compute Target",permalink:"/azureml-web/docs/cheatsheet/compute-targets"},next:{title:"Data",permalink:"/azureml-web/docs/cheatsheet/data"}},s=[{value:"Azure ML Environment",id:"azure-ml-environment",children:[]},{value:"Create Conda Dependencies",id:"create-conda-dependencies",children:[{value:"From pip",id:"from-pip",children:[]},{value:"From Conda",id:"from-conda",children:[]},{value:"From SDK",id:"from-sdk",children:[]}]},{value:"Registered Environments",id:"registered-environments",children:[]},{value:"Save / Load Environments",id:"save--load-environments",children:[]},{value:"How Azure ML Build Image from a Environment",id:"how-azure-ml-build-image-from-a-environment",children:[]},{value:"(Advanced) Custom Docker Images",id:"advanced-custom-docker-images",children:[{value:"Requirements for custom image",id:"requirements-for-custom-image",children:[]},{value:"Provide Python packages to the custom image",id:"provide-python-packages-to-the-custom-image",children:[]},{value:"Use Python interpreter from the custom image",id:"use-python-interpreter-from-the-custom-image",children:[]},{value:"Use custom image from a private registry",id:"use-custom-image-from-a-private-registry",children:[]}]},{value:"(Advanced) Environment Variables",id:"advanced-environment-variables",children:[]},{value:"(Advanced) Shell Initialization Script",id:"advanced-shell-initialization-script",children:[]}],l={rightToc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"azure-ml-environment"},"Azure ML Environment"),Object(i.b)("p",null,"Your jobs on Azure ML are reproducible, portable and can be easily scaled up to different compute targets. With this philosophy, Azure ML heavily relies on container to encapsulate the environment where your python script and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#advanced-shell-initialization-script"}),"shell commands")," will run. For majority of use cases, the environment\nconsists of a base docker image and a conda environment (including pip dependencies). For R users there is also a setting for ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.core.environment.rcranpackage?view=azure-ml-py"}),"R CRAN packages")," which we won't get into detail here. "),Object(i.b)("p",null,"Azure ML provides the following options:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"(Default but not so useful) If user doesn't customize an environment object when submitting their run, Azure ML will use a default container image, with only one python package called ",Object(i.b)("inlineCode",{parentName:"li"},"azureml-defaults")," which includes only Azure ML  essentials. "),Object(i.b)("li",{parentName:"ol"},"Use one of the ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments"}),"curated environment"),"."),Object(i.b)("li",{parentName:"ol"},"Use one of the ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Azure/AzureML-Containers"}),"default base image"),", and ask Azure ML to manage Conda dependencies by ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#create-conda-dependencies"}),"providing a ",Object(i.b)("inlineCode",{parentName:"a"},"CondaDependencies")," object"),". "),Object(i.b)("li",{parentName:"ol"},"Use a previously ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#registered-environments"}),"registered environment"),"."),Object(i.b)("li",{parentName:"ol"},"Use a ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#advanced-custom-docker-images"}),"custom docker image or dockerfile"),". User can either use a python environment in the image directly by using this as the docker base image for the environment and set ",Object(i.b)("inlineCode",{parentName:"li"},"user_managed_dependencies=True"),", in this case Azure ML won't be able to manage and add extra python dependencies. Or user can ask Azure ML to manage Conda dependencies by ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#create-conda-dependencies"}),"providing a ",Object(i.b)("inlineCode",{parentName:"a"},"CondaDependencies")," object"),". ")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"When the conda dependencies are managed by Azure ML (",Object(i.b)("inlineCode",{parentName:"p"},"user_managed_dependencies=False"),", by default), Azure ML will check whether the same environment has already been materialized into a docker image in the Azure Container Registry associated with the Azure ML workspace. If it is a new environment, Azure ML will have a job preparation stage to build\na new docker image for the new environment. user can see a image build log file in the logs and monitor the image build progress. The job won't start until the image is built and pushed to the container registry. "),Object(i.b)("p",{parentName:"div"},"This image building process can take some time and delay your job start. To avoid unnecessary image building, consider"),Object(i.b)("ol",{parentName:"div"},Object(i.b)("li",{parentName:"ol"},"Register an environment that contains most packages you need and reuse when possible."),Object(i.b)("li",{parentName:"ol"},"If you only need a few extra packages on top of an existing environment, ",Object(i.b)("ol",{parentName:"li"},Object(i.b)("li",{parentName:"ol"},"If the existing environment is a docker image, use a dockerfile from this docker image so you only need to add one layer to install a few extra packagers. "),Object(i.b)("li",{parentName:"ol"},"Install extra python packages in your user script so the package installation happens in the script run as part of your code instead of asking Azure ML to treat them as part of a new environment. Consider using a ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#advanced-shell-initialization-script"}),"setup script"),".")))))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Due to intricacy of the python package dependencies and potential version conflict, we recommend users to understand the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#how-azure-ml-build-image-from-a-environment"}),"image building process")," and use custom docker image and dockerfiles (based on Azure ML base images) to manage your own python environment. This practice not only gives users full transparency of the environment, but also saves image building times at agile development stage. "))),Object(i.b)("h2",{id:"create-conda-dependencies"},"Create Conda Dependencies"),Object(i.b)("p",null,"Easily create, maintain and share Python environments with ",Object(i.b)("strong",{parentName:"p"},"pip")," and ",Object(i.b)("strong",{parentName:"p"},"Conda"),", or directly from the ",Object(i.b)("strong",{parentName:"p"},"Python SDK"),"."),Object(i.b)("h3",{id:"from-pip"},"From pip"),Object(i.b)("p",null,"Create Environment from pip ",Object(i.b)("inlineCode",{parentName:"p"},"requirements.txt")," file"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_pip_requirements('<environment-name>', '<path/to/requirements.txt>')\n")),Object(i.b)("h3",{id:"from-conda"},"From Conda"),Object(i.b)("p",null,"Create Environment from Conda ",Object(i.b)("inlineCode",{parentName:"p"},"env.yml")," file"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_conda_specifications('<environment-name>', '<path/to/env.yml>')\n")),Object(i.b)("h3",{id:"from-sdk"},"From SDK"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"CondaDependencies")," class to create a Python environment in code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core.conda_dependencies import CondaDependencies\n\nconda = CondaDependencies()\n\n# add channels\nconda.add_channel('pytorch')\n\n# add conda packages\nconda.add_conda_package('python=3.7')\nconda.add_conda_package('pytorch')\nconda.add_conda_package('torchvision')\n\n# add pip packages\nconda.add_pip_package('pyyaml')\n")),Object(i.b)("p",null,"Which can be consumed by an environment as follows."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment('pytorch')\nenv.python.conda_dependencies = conda\n")),Object(i.b)("p",null,"Converting the conda_dependencies to an ",Object(i.b)("inlineCode",{parentName:"p"},"env.yml")," file later is easy:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"conda.save('env.yml')\n")),Object(i.b)("p",null,"This example will generate the following file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="env.yml"',title:'"env.yml"'}),"# Conda environment specification. The dependencies defined in this file will\n# be automatically provisioned for runs with userManagedDependencies=False.\n\n# Details about the Conda environment file format:\n# https://conda.io/docs/user-guide/tasks/manage-environments.html#create-env-file-manually\n\nname: project_environment\ndependencies:\n  # The python interpreter version.\n  # Currently Azure ML only supports 3.5.2 and later.\n- python=3.7\n\n- pip:\n    # Required packages for Azure ML execution, history, and data preparation.\n  - azureml-defaults\n\n  - pyyaml\n- pytorch\n- torchvision\nchannels:\n- anaconda\n- conda-forge\n- pytorch\n")),Object(i.b)("h2",{id:"registered-environments"},"Registered Environments"),Object(i.b)("p",null,"Register an environment ",Object(i.b)("inlineCode",{parentName:"p"},"env: Environment")," to your workspace ",Object(i.b)("inlineCode",{parentName:"p"},"ws")," to reuse/share with your team."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env.register(ws)\n")),Object(i.b)("p",null,"To see the registered Environments already available:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"envs: Dict[str, Environment] = ws.environments\n\nfor name, env in envs.items():\n    print(name)\n# Azure ML-Chainer-5.1.0-GPU\n# Azure ML-Scikit-learn-0.20.3\n# Azure ML-PyTorch-1.1-GPU\n# ...\n")),Object(i.b)("p",null,"This list contains custom environments that have been registered to the workspace as well as a\ncollection of ",Object(i.b)("em",{parentName:"p"},"curated environments")," maintained by the Azure ML team."),Object(i.b)("p",null,"List the conda dependencies for a given environment, for example in 'Azure ML-Chainer-5.1.0-GPU':"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = ws.environments['Azure ML-PyTorch-1.1-GPU']\nprint(env.python.conda_dependencies.serialize_to_string())\n")),Object(i.b)("p",null,"Which returns the following."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Azure ML-PyTorch-1.1-GPU Conda Dependencies"',title:'"Azure',"ML-PyTorch-1.1-GPU":!0,Conda:!0,'Dependencies"':!0}),"channels:\n- conda-forge\ndependencies:\n- python=3.6.2\n- pip:\n  - azureml-core==1.15.0\n  - azureml-defaults==1.15.0\n  - azureml-telemetry==1.15.0\n  - azureml-train-restclients-hyperdrive==1.15.0\n  - azureml-train-core==1.15.0\n  - torch==1.1\n  - torchvision==0.2.1\n  - mkl==2018.0.3\n  - horovod==0.16.1\n  - tensorboard==1.14.0\n  - future==0.17.1\nname: azureml_eb61e39e20e87ad998ae2c88df1dd0af\n")),Object(i.b)("h2",{id:"save--load-environments"},"Save / Load Environments"),Object(i.b)("p",null,"Save an environment to a local directory:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env.save_to_directory('<path/to/local/directory>', overwrite=True)\n")),Object(i.b)("p",null,"This will generate a directory with two (human-understandable and editable) files:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"azureml_environment.json")," : Metadata including name, version, environment variables and Python and Docker configuration"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"conda_dependencies.yml")," : Standard conda dependencies YAML (for more deatils see ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-from-an-environment-yml-file"}),"Conda docs"),").")),Object(i.b)("p",null,"Load this environment later with"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = Environment.load_from_directory('<path/to/local/directory>')\n")),Object(i.b)("h2",{id:"how-azure-ml-build-image-from-a-environment"},"How Azure ML Build Image from a Environment"),Object(i.b)("p",null,"This section explains how Azure ML builds its docker image based on an ",Object(i.b)("inlineCode",{parentName:"p"},"Environment"),"."),Object(i.b)("p",null,"Consider the following example ",Object(i.b)("inlineCode",{parentName:"p"},"env.yml")," file."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="env.yml"',title:'"env.yml"'}),"name: pytorch\nchannels:\n    - defaults\n    - pytorch\ndependencies:\n    - python=3.7\n    - pytorch\n    - torchvision\n")),Object(i.b)("p",null,"Create and register this as an ",Object(i.b)("inlineCode",{parentName:"p"},"Environment")," in your workspace ",Object(i.b)("inlineCode",{parentName:"p"},"ws"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_conda_specification('pytorch', 'env.yml')\nenv.register(ws)\n")),Object(i.b)("p",null,"In order to consume this environment, Azure ML builds a corresponding docker image. This dockerfile\nis available as part of the ",Object(i.b)("inlineCode",{parentName:"p"},"Environment")," object ",Object(i.b)("inlineCode",{parentName:"p"},"env"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"details = env.get_image_details(ws)\nprint(details.dockerfile)\n")),Object(i.b)("p",null,"Which looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-docker",metastring:'title="Dockerfile" {1,7-12}',title:'"Dockerfile"',"{1,7-12}":!0}),'FROM mcr.microsoft.com/azureml/intelmpi2018.3-ubuntu16.04:20200821.v1@sha256:8cee6f674276dddb23068d2710da7f7f95b119412cc482675ac79ba45a4acf99\nUSER root\nRUN mkdir -p $HOME/.cache\nWORKDIR /\nCOPY azureml-environment-setup/99brokenproxy /etc/apt/apt.conf.d/\nRUN if dpkg --compare-versions `conda --version | grep -oE \'[^ ]+$\'` lt 4.4.11; then conda install conda==4.4.11; fi\nCOPY azureml-environment-setup/mutated_conda_dependencies.yml azureml-environment-setup/mutated_conda_dependencies.yml\nRUN ldconfig /usr/local/cuda/lib64/stubs && conda env create -p /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6 -\nf azureml-environment-setup/mutated_conda_dependencies.yml && rm -rf "$HOME/.cache/pip" && conda clean -aqy && CONDA_ROO\nT_DIR=$(conda info --root) && rm -rf "$CONDA_ROOT_DIR/pkgs" && find "$CONDA_ROOT_DIR" -type d -name __pycache__ -exec rm\n -rf {} + && ldconfig\n# Azure ML Conda environment name: azureml_7459a71437df47401c6a369f49fbbdb6\nENV PATH /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6/bin:$PATH\nENV AZUREML_CONDA_ENVIRONMENT_PATH /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6\nENV LD_LIBRARY_PATH /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6/lib:$LD_LIBRARY_PATH\nCOPY azureml-environment-setup/spark_cache.py azureml-environment-setup/log4j.properties /azureml-environment-setup/\nRUN if [ $SPARK_HOME ]; then /bin/bash -c \'$SPARK_HOME/bin/spark-submit  /azureml-environment-setup/spark_cache.py\'; fi\nENV AZUREML_ENVIRONMENT_IMAGE True\nCMD ["bash"]\n')),Object(i.b)("p",null,"Notice:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The base image here is a standard image maintained by Azure ML. Dockerfiles for all base images are available on\ngithub: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Azure/AzureML-Containers"}),"https://github.com/Azure/AzureML-Containers")," . You can also use your own docker image as base image. "),Object(i.b)("li",{parentName:"ul"},"The dockerfile references ",Object(i.b)("inlineCode",{parentName:"li"},"mutated_conda_dependencies.yml")," to build the Python environment via Conda. ")),Object(i.b)("p",null,"Get the contents of ",Object(i.b)("inlineCode",{parentName:"p"},"mutated_conda_dependencies.yml")," from the environment:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env.python.conda_dependencies.serialize_to_string()\n")),Object(i.b)("p",null,"Which looks like"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="mutated_conda_dependencies.yml"',title:'"mutated_conda_dependencies.yml"'}),"channels:\n    - defaults\n    - pytorch\ndependencies:\n    - python=3.7\n    - pytorch\n    - torchvision\nname: azureml_7459a71437df47401c6a369f49fbbdb6\n")),Object(i.b)("p",null,"If you have docker installed locally, you can build the docker image from Azure ML environment locally with option to push the image to workspace ACR directly. This is recommended when users are iterating on the dockerfile since local build can\nutilize cached layers. "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"build = env.build_local(workspace=ws, useDocker=True, pushImageToWorkspaceAcr=True)\n")),Object(i.b)("h2",{id:"advanced-custom-docker-images"},"(Advanced) Custom Docker Images"),Object(i.b)("p",null,"By default, Azure ML will create your Python environment inside a Docker image it maintains."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"No secrets")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"This default image is not a secret. For example, you can see the Dockerfile used to create\nit with the following:"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment('no-secrets')             # create new Environment\nenv.register(ws)                            # register to the workspace\ndetails = env.get_image_details(ws)\nprint(details['ingredients']['dockerfile'])\n")),Object(i.b)("p",{parentName:"div"},"Dockerfiles for all base images are available on github: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Azure/AzureML-Containers"}),"https://github.com/Azure/AzureML-Containers")))),Object(i.b)("p",null,"You may chose to use your own Docker image. In this case there are two options for python environment:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Ask Azure ML to manage a new conda environment custom base docker image provided"),Object(i.b)("li",{parentName:"ul"},"Use a python environment already exists in the custom base docker image provided")),Object(i.b)("h3",{id:"requirements-for-custom-image"},"Requirements for custom image"),Object(i.b)("p",null,"We strongly recommend user to build their custom image from one of the Azure ML base images. If user wants to build from scratch, here are a list of requirements and recommendations to keep in mind:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Conda"),": Azure ML uses Conda to manage python environments by default. If you intent to allow Azure ML to manage the python environment, Conda is required. "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"libfuse"),": Required when using ",Object(i.b)("inlineCode",{parentName:"li"},"Dataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Openmpi"),": Required for distributed runs"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"nvidia/cuda"),": (Recommended) For GPU-based training build image from ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://hub.docker.com/r/nvidia/cuda"}),"nvidia/cuda")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Mellanox OFED user space drivers")," (Recommend) For SKUs with Infiniband ")),Object(i.b)("p",null,"We suggest users to look at the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Azure/AzureML-Containers"}),"dockerfiles of Azure ML base images")," as references.  "),Object(i.b)("h3",{id:"provide-python-packages-to-the-custom-image"},"Provide Python packages to the custom image"),Object(i.b)("p",null,"In this case we will use pip, Conda or the SDK to manage our Python packages as above, resulting\nin ",Object(i.b)("inlineCode",{parentName:"p"},"env: Environment"),". For example,"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = Environment.from_pip_requirements('nlp', 'requirements.txt')\n")),Object(i.b)("p",null,"Assuming you have a Dockerfile to hand you can specify the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# just as an example\nenv.docker.base_image = None                    # translation: do not use your default base image\nenv.docker.base_dockerfile = "./Dockerfile"     # translation: use my Dockerfile as base instead\n')),Object(i.b)("p",null,"When you use this environment in a compute target it will build a Docker image as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-docker"}),"###\nContents of your base dockerfile\n###\n\n###\nBuild the Python dependencies as specified in env object\n###\n")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Again, you can see the exact contents of this Dockerfile used by running"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"details = env.get_image_details(ws)\nprint(details['ingredients']['dockerfile'])\n")))),Object(i.b)("h3",{id:"use-python-interpreter-from-the-custom-image"},"Use Python interpreter from the custom image"),Object(i.b)("p",null,"Usually your custom Docker image has its own Python environment already set up."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-docker",metastring:'title="Dockerfile"',title:'"Dockerfile"'}),'FROM mcr.microsoft.com/azureml/base:intelmpi2018.3-ubuntu16.04\nRUN conda update -n base -c defaults conda\nRUN [ "/bin/bash", "-c", "conda create -n pytorch Python=3.6.2 && source activate amlbert && conda install pip"]\nRUN /opt/miniconda/envs/pytorch/bin/pip install pytorch\n')),Object(i.b)("p",null,"In this case you need to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Indicate that you are managing your own Python dependencies: ",Object(i.b)("inlineCode",{parentName:"li"},"user_managed_dependencies=True")),Object(i.b)("li",{parentName:"ul"},"Specify the path to your Python interpreter: ",Object(i.b)("inlineCode",{parentName:"li"},"interpreter_path=<path>"))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'env = Environment(\'pytorch\')    # create an Environment called \'pytorch\'\n\n# set up custom docker image or a dockerfile\n# env.docker.base_image = "mcr.microsoft.com/azureml/openmpi3.1.2-cuda10.1-cudnn7-ubuntu18.04"\n# or set up base image from a dockerfile\nenv.docker.base_dockerfile = "./Dockerfile"\n\n# indicate how to run Python\nenv.python.user_managed_dependencies=True\nenv.python.interpreter_path = "/opt/miniconda/bin/python"\n')),Object(i.b)("h3",{id:"use-custom-image-from-a-private-registry"},"Use custom image from a private registry"),Object(i.b)("p",null,"Azure ML Environment can use a Custom image from a private registry as long as login information are provided. "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'env = Environment(\'myenv\') # create an Environment called \'myenv\'\nenv.docker.base_image = "/my/private/img:tag",  #image repository path\nenv.docker.base_image_registry.address = "myprivateacr.azurecr.io"  # private registry\n# Retrieve username and password from the workspace key vault\nenv.docker.base_image_registry.username = ws.get_default_keyvault().get_secret("username")  \nenv.docker.base_image_registry.password = ws.get_default_keyvault().get_secret("password")\n')),Object(i.b)("h2",{id:"advanced-environment-variables"},"(Advanced) Environment Variables"),Object(i.b)("p",null,"To set environment variables use the ",Object(i.b)("inlineCode",{parentName:"p"},"environment_variables: Dict[str, str]")," attribute. Environment variables\nare set on the process where the user script is executed."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = Environment('example')\nenv.environment_variables['EXAMPLE_ENV_VAR'] = 'EXAMPLE_VALUE'\n")),Object(i.b)("h2",{id:"advanced-shell-initialization-script"},"(Advanced) Shell Initialization Script"),Object(i.b)("p",null,"A useful pattern is to run shell scripts on Azure ML compute to prepare the nodes."),Object(i.b)("p",null,"In this example we show how to use initialization shell scripts for both ",Object(i.b)("strong",{parentName:"p"},"individual nodes")," as well\nas ",Object(i.b)("strong",{parentName:"p"},"each process"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"setup.sh"),": This will run only on local_rank 0 process (i.e., once per node)",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Run a utility script ",Object(i.b)("inlineCode",{parentName:"li"},"download_data.py")," to download training data to the node"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"run.sh")," : This will run on each process",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"})))),Object(i.b)("p",null,"These scripts will run ahead of our main python call to ",Object(i.b)("inlineCode",{parentName:"p"},"train.py"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"src/\n  setup.sh              # init local_rank 0\n  run.sh                # init for each rank\n  requirements.txt      # pip requirements\n  download_data.py      # utility script to download training data\n  train.py              # model training script\n  aml_wrapper.py        # thin wrapper calling setup.sh and run.sh\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="setup.sh"',title:'"setup.sh"'}),"pip install -r requirements.txt\npython download_data.py --output_dir /tmp/data\n")),Object(i.b)("p",null,"This script runs ",Object(i.b)("inlineCode",{parentName:"p"},"download_data.py")," which downloads training data to the specified output\ndirectory ",Object(i.b)("inlineCode",{parentName:"p"},"/tmp/data"),"."),Object(i.b)("p",null,"In this example the data should be downloaded once per node in the compute cluster (not once\nper process!). "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="run.sh"',title:'"run.sh"'}),"python train.py --training_data /tmp/data --learning_rate 1e-6\n")),Object(i.b)("p",null,"This is the main call to the training script and needs to be called by each process. The data\ndownloaded by ",Object(i.b)("inlineCode",{parentName:"p"},"download_data.py")," is referenced as a command-line argument."),Object(i.b)("p",null,"Finally, prepare a wrapper script to execute the above. Notice the wrapper script takes a great deal of care to make sure ",Object(i.b)("inlineCode",{parentName:"p"},"setup.sh")," only\nexecuted once in each node and when there are multiple processes per node other nodes will wait when ",Object(i.b)("inlineCode",{parentName:"p"},"setup.sh")," is executing. A marker file is used\nto mimic a barrier so all processes are in sync.  "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python",metastring:'title="aml_wrapper.py"',title:'"aml_wrapper.py"'}),'#!/usr/bin/env python\nimport os\nimport pathlib\nimport sys\nimport time\n\nMARKER = pathlib.Path("/tmp/.aml_setup_done")\n\ndef run_command(*files, verbose=False):\n  lines = []\n  for file in files:\n    if not os.path.exists(file):\n      print("No file %s", file)\n      return 1\n\n    with open(file, \'rt\') as f:\n      script = f.read()\n      script = script.replace(\'\\r\', \'\')  # for Windows submissions\n      lines.extend(script.split(\'\\n\'))\n\n  print("Executing", *files)\n  if verbose:\n    lines.insert(0, "set -o xtrace")\n  return os.system(";".join(lines))\n\nif __name__ == "__main__":\n\n  if "OMPI_COMM_WORLD_LOCAL_RANK" in os.environ:\n    if os.environ["OMPI_COMM_WORLD_LOCAL_RANK"] == "0":\n      try:\n        run_command("./setup.sh", verbose=True)\n      finally:\n        MARKER.touch(exist_ok=True)\n    while not MARKER.exists():\n      time.sleep(1)\n\n    sys.exit(run_command("./run.sh", verbose=False) >> 8)\n\n  return_code = run_command("./setup.sh", "./run.sh")\n  sys.exit(return_code >> 8)\n')),Object(i.b)("p",null,"Submit this to a ",Object(i.b)("inlineCode",{parentName:"p"},"ComputeTarget")," with ",Object(i.b)("inlineCode",{parentName:"p"},"ScriptRunConfig"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace, ComputeTarget, ScriptRunConfig\n\nws = Workspace.from_config()\ncompute_target = ws.compute_targets['<compute-target-name>']\n\nconfig = ScriptRunConfig(\n    source_directory='src',\n    script='aml_wrapper.py',\n    compute_target=compute_target,\n)\n")))}p.isMDXComponent=!0}}]);