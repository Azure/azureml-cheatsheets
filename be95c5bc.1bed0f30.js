(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=o.a.createContext({}),s=function(e){var n=o.a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=s(e.components);return o.a.createElement(m.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),l=s(t),u=r,d=l["".concat(p,".").concat(u)]||l[u]||b[u]||a;return t?o.a.createElement(d,c(c({ref:n},m),{},{components:t})):o.a.createElement(d,c({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,p=new Array(a);p[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,p[1]=c;for(var m=2;m<a;m++)p[m]=t[m];return o.a.createElement.apply(null,p)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},178:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/vs-code-snippets-demo-0cadcf0d99a274246e4001b0ae7d00f3.gif"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return s}));var r=t(2),o=t(6),a=(t(0),t(106)),p={title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML."},c={unversionedId:"vs-code-snippets/snippets",id:"vs-code-snippets/snippets",isDocsHomePage:!1,title:"VS Code Snippets",description:"A collection of VS Code Snippets for working with Azure ML.",source:"@site/docs/vs-code-snippets/snippets.md",slug:"/vs-code-snippets/snippets",permalink:"/azureml-web/docs/vs-code-snippets/snippets",editUrl:"https://github.com/Azure/azureml-web/tree/main/website/docs/vs-code-snippets/snippets.md",version:"current"},i=[{value:"Imports Group: Basic",id:"imports-group-basic",children:[]},{value:"Import Workspace",id:"import-workspace",children:[]},{value:"Import Compute Target",id:"import-compute-target",children:[]},{value:"Import Environment",id:"import-environment",children:[]},{value:"Import ScriptRunConfig",id:"import-scriptrunconfig",children:[]},{value:"Import Dataset",id:"import-dataset",children:[]},{value:"Import Datastore",id:"import-datastore",children:[]},{value:"Import Run",id:"import-run",children:[]},{value:"Import Conda Dependencies",id:"import-conda-dependencies",children:[]},{value:"Get Workspace From Config",id:"get-workspace-from-config",children:[]},{value:"Get Workspace",id:"get-workspace",children:[]},{value:"Get Compute",id:"get-compute",children:[]},{value:"Get Compute with SSH",id:"get-compute-with-ssh",children:[]},{value:"Get Environment",id:"get-environment",children:[]},{value:"Get Environment From Pip",id:"get-environment-from-pip",children:[]},{value:"Get Environment From Conda",id:"get-environment-from-conda",children:[]},{value:"Get Environment From SDK",id:"get-environment-from-sdk",children:[]},{value:"Workspace Compute Targets",id:"workspace-compute-targets",children:[]},{value:"Workspace Environments",id:"workspace-environments",children:[]},{value:"Workspace Datastores",id:"workspace-datastores",children:[]},{value:"Workspace Datasets",id:"workspace-datasets",children:[]},{value:"Workspace Experiment",id:"workspace-experiment",children:[]},{value:"Workspace Models",id:"workspace-models",children:[]},{value:"Script Run Config",id:"script-run-config",children:[]}],m={rightToc:i};function s(e){var n=e.components,p=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},m,p,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"We have compiled a collection of useful templates in the form of\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets"}),"VS code snippets"),"."),Object(a.b)("p",null,Object(a.b)("img",{alt:"VS Code Snippets",src:t(178).default})),Object(a.b)("p",null,"To add these snippets to your VS Code: ",Object(a.b)("inlineCode",{parentName:"p"},"ctrl+shift+p")," > Type 'Configure user\nsnippets' > Select ",Object(a.b)("inlineCode",{parentName:"p"},"python.json"),". All of these snippets are available here:\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Azure/azureml-examples/blob/main/website/docs/vs-code-snippets/python.json"}),"python.json")),Object(a.b)("h3",{id:"imports-group-basic"},"Imports Group: Basic"),Object(a.b)("p",null,"Description: Import collection of basic Azure ML classes"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-basic")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace              # connect to workspace\nfrom azureml.core import Experiment             # connect/create experiments\nfrom azureml.core import ComputeTarget          # connect to compute\nfrom azureml.core import Environment            # manage e.g. Python environments\nfrom azureml.core import Datastore, Dataset     # work with data\n")),Object(a.b)("h3",{id:"import-workspace"},"Import Workspace"),Object(a.b)("p",null,"Description: Import Workspace class"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-workspace")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace\n")),Object(a.b)("h3",{id:"import-compute-target"},"Import Compute Target"),Object(a.b)("p",null,"Description: Import ComputeTarget class"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-compute-target")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import ComputeTarget\n")),Object(a.b)("h3",{id:"import-environment"},"Import Environment"),Object(a.b)("p",null,"Description: Import Environment class"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-environment")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\n")),Object(a.b)("h3",{id:"import-scriptrunconfig"},"Import ScriptRunConfig"),Object(a.b)("p",null,"Description: Import ScriptRunConfig class"),Object(a.b)("p",null,"Prefixes: ",Object(a.b)("inlineCode",{parentName:"p"},"import-script-run-config"),", ",Object(a.b)("inlineCode",{parentName:"p"},"import-src")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import ScriptRunConfig\n")),Object(a.b)("h3",{id:"import-dataset"},"Import Dataset"),Object(a.b)("p",null,"Description: Import Dataset class"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-dataset")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Dataset\n")),Object(a.b)("h3",{id:"import-datastore"},"Import Datastore"),Object(a.b)("p",null,"Description: Import Datastore class"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-datastore")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Datastore\n")),Object(a.b)("h3",{id:"import-run"},"Import Run"),Object(a.b)("p",null,"Description: Import Run class"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-run")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Run\n")),Object(a.b)("h3",{id:"import-conda-dependencies"},"Import Conda Dependencies"),Object(a.b)("p",null,"Description: Import CondaDependencies class"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"import-conda-dependencies")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core.conda_dependencies import CondaDependencies\n")),Object(a.b)("h3",{id:"get-workspace-from-config"},"Get Workspace From Config"),Object(a.b)("p",null,"Description: Get Azure ML Workspace from config"),Object(a.b)("p",null,"Prefixes: ",Object(a.b)("inlineCode",{parentName:"p"},"get-workspace-config"),", ",Object(a.b)("inlineCode",{parentName:"p"},"ws-config")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace\nws = Workspace.from_config()\n")),Object(a.b)("h3",{id:"get-workspace"},"Get Workspace"),Object(a.b)("p",null,"Description: Get Azure ML Workspace"),Object(a.b)("p",null,"Prefixes: ",Object(a.b)("inlineCode",{parentName:"p"},"get-workspace"),", ",Object(a.b)("inlineCode",{parentName:"p"},"get-ws")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace\nws = Workspace.get(\n    name='${1:name}',\n    subscription_id='${2:subscription_id}',\n    resource_group='${3:resource_group}',\n)\n")),Object(a.b)("h3",{id:"get-compute"},"Get Compute"),Object(a.b)("p",null,"Description: Get Azure ML Compute Target"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"get-compute")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import ComputeTarget\ntarget = ComputeTarget(${2:ws}, '${1:<compute_target_name>}')\n")),Object(a.b)("h3",{id:"get-compute-with-ssh"},"Get Compute with SSH"),Object(a.b)("p",null,"Description: Get Azure ML Compute Target"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"get-compute-ssh")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core.compute import AmlCompute\nfrom azureml.core.compute_target import ComputeTargetException\n\nssh_public_key = 'public-key-here'\ncompute_config = AmlCompute.provisioning_configuration(\n    vm_size='$2',\n    min_nodes=$3,\n    max_nodes=$4,\n    admin_username='$5',\n    admin_user_ssh_key=ssh_public_key,\n    vm_priority='${6|lowpriority,dedicated|}',\n    remote_login_port_public_access='Enabled',\n    )\n\ncluster = ComputeTarget.create(\n    workspace=${7:workspace_name},\n    name='${8:target_name}',\n    compute_config=compute_config,\n)\n")),Object(a.b)("h3",{id:"get-environment"},"Get Environment"),Object(a.b)("p",null,"Description: Get Azure ML Compute Target"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"get-environment")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\n${2:env} = Environment('${1:<env-name>}')\n")),Object(a.b)("h3",{id:"get-environment-from-pip"},"Get Environment From Pip"),Object(a.b)("p",null,"Description: Create environment from pip requirements.txt"),Object(a.b)("p",null,"Prefixes: ",Object(a.b)("inlineCode",{parentName:"p"},"get-environment-pip"),", ",Object(a.b)("inlineCode",{parentName:"p"},"env-pip")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_pip_requirements(\n    name='${1:env_name}',\n    file_path='${2:requirements.txt}',\n)\n")),Object(a.b)("h3",{id:"get-environment-from-conda"},"Get Environment From Conda"),Object(a.b)("p",null,"Description: Create environment from Conda env.yml file"),Object(a.b)("p",null,"Prefixes: ",Object(a.b)("inlineCode",{parentName:"p"},"get-environment-conda"),", ",Object(a.b)("inlineCode",{parentName:"p"},"env-conda")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_conda_specification(\n    name='${1:env_name}',\n    file_path='${2:env.yml}',\n)\n")),Object(a.b)("h3",{id:"get-environment-from-sdk"},"Get Environment From SDK"),Object(a.b)("p",null,"Description: Create environment using CondaDependencies class"),Object(a.b)("p",null,"Prefixes: ",Object(a.b)("inlineCode",{parentName:"p"},"get-environment-sdk"),", ",Object(a.b)("inlineCode",{parentName:"p"},"env-sdk")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nfrom azureml.core.conda_dependencies import CondaDependencies\nenv = Environment('${1:my-env}')\n\nconda = CondaDependencies()\n\n# add channels\nconda.add_channel('$2')\n\n# add conda packages\nconda.add_conda_package('$3')\n\n# add pip packages\nconda.add_pip_package('$4')\n\n# add conda dependencies to environment\nenv.python.conda_dependencies = conda\n")),Object(a.b)("h3",{id:"workspace-compute-targets"},"Workspace Compute Targets"),Object(a.b)("p",null,"Description: Get compute target from workspace"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"ws-compute-target")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"target = ws.compute_targets['${1:target-name}']\n")),Object(a.b)("h3",{id:"workspace-environments"},"Workspace Environments"),Object(a.b)("p",null,"Description: Get environment from workspace"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"ws-environment")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"env = ws.environments['${1:env-name}']\n")),Object(a.b)("h3",{id:"workspace-datastores"},"Workspace Datastores"),Object(a.b)("p",null,"Description: Get datastore from workspace"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"ws-datastore")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"datastore = ws.datastores['${1:datastore-name}']\n")),Object(a.b)("h3",{id:"workspace-datasets"},"Workspace Datasets"),Object(a.b)("p",null,"Description: Get dataset from workspace"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"ws-dataset")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"dataset = ws.datasets['${1:dataset-name}']\n")),Object(a.b)("h3",{id:"workspace-experiment"},"Workspace Experiment"),Object(a.b)("p",null,"Description: Get (existing) experiment from workspace"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"ws-experiment")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"exp = ws.experiments['${1:experiment-name}']\n")),Object(a.b)("h3",{id:"workspace-models"},"Workspace Models"),Object(a.b)("p",null,"Description: Get model from workspace"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"ws-model")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"model = ws.models['${1:model-name}']\n")),Object(a.b)("h3",{id:"script-run-config"},"Script Run Config"),Object(a.b)("p",null,"Description: Set up ScriptRunConfig including compute target, environment and experiment"),Object(a.b)("p",null,"Prefix: ",Object(a.b)("inlineCode",{parentName:"p"},"script-run-config")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace, Experiment, ScriptRunConfig\n\n# get workspace\nws = Workspace.from_config()\n\n# get compute target\ntarget = ws.compute_targets['${1:target-name}']\n\n# get registered environment\nenv = ws.environments['${2:env-name}']\n\n# get/create experiment\nexp = Experiment(ws, '${3:experiment_name}')\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='${4:.}',\n    script='${5:script.py}',\n    compute_target=target,\n    environment=env,\n    arguments=[${6:'--meaning', 42}],\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\nrun.wait_for_completion(show_output=True)\n")))}s.isMDXComponent=!0}}]);